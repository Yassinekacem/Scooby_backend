
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  firstName: string
  lastName: string
  email: string
  photo: string
  password: string
  phoneNumber: string
  role: Role
  createdAt: string
  updatedAt: string
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: number
  category: Category
  brandProduct: string
  description: string
  animalCible: string
  image: string
  price: number
  isDispo: boolean
  userId: number
}

/**
 * Model Announcement
 * 
 */
export type Announcement = {
  id: number
  type: Service
  firstName: string
  lastName: string
  contact: string
  ville: string
  experience: number
  level: Level
  image: string
  description: string
  city: string
  userId: number
}

/**
 * Model Animal
 * 
 */
export type Animal = {
  id: number
  species: string
  race: string
  dateOfBirth: string
  name: string
  description: string
  age: number
  isVaccinated: boolean
  isEducated: boolean
  gender: gender
  status: status
  price: number
  image: string
  userId: number
}

/**
 * Model LostDeclaration
 * 
 */
export type LostDeclaration = {
  id: number
  image: string
  animal: typeAnimal
  race: string
  description: string
  dateLost: string
  placeLost: string
  phoneNumber: string
  withReward: boolean
}

/**
 * Model FoundDeclaration
 * 
 */
export type FoundDeclaration = {
  id: number
  image: string
  animal: typeAnimal
  race: string
  description: string
  dateFound: string
  placeFound: string
  phoneNumber: string
}

/**
 * Model comment
 * 
 */
export type comment = {
  id: number
  firstName: string
  lastName: string
  message: string
  createdAt: string
  stars: number
  userId: number
  announcementId: number
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  firstName: string
  lastName: string
  content: string
  createdAt: string
  image: string
  userId: number
}

/**
 * Model Response
 * 
 */
export type Response = {
  id: number
  firstName: string
  lastName: string
  response: string
  image: string
  createdAt: string
  userId: number
  postId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Category: {
  food: 'food',
  accessory: 'accessory'
};

export type Category = (typeof Category)[keyof typeof Category]


export const Level: {
  basique: 'basique',
  intermediaire: 'intermediaire',
  personnalise: 'personnalise'
};

export type Level = (typeof Level)[keyof typeof Level]


export const Role: {
  admin: 'admin',
  client: 'client',
  veterinary: 'veterinary',
  petTrainer: 'petTrainer',
  petSitter: 'petSitter',
  petGroomer: 'petGroomer',
  petShop: 'petShop',
  petSeller: 'petSeller',
  animalOwner: 'animalOwner'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Service: {
  veterinaryCaring: 'veterinaryCaring',
  petSitting: 'petSitting',
  petGrooming: 'petGrooming',
  petTraining: 'petTraining'
};

export type Service = (typeof Service)[keyof typeof Service]


export const gender: {
  male: 'male',
  female: 'female'
};

export type gender = (typeof gender)[keyof typeof gender]


export const status: {
  toSell: 'toSell',
  toAdopt: 'toAdopt'
};

export type status = (typeof status)[keyof typeof status]


export const typeAnimal: {
  chat: 'chat',
  chien: 'chien'
};

export type typeAnimal = (typeof typeAnimal)[keyof typeof typeAnimal]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Announcements
    * const announcements = await prisma.announcement.findMany()
    * ```
    */
  get announcement(): Prisma.AnnouncementDelegate<GlobalReject>;

  /**
   * `prisma.animal`: Exposes CRUD operations for the **Animal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animals
    * const animals = await prisma.animal.findMany()
    * ```
    */
  get animal(): Prisma.AnimalDelegate<GlobalReject>;

  /**
   * `prisma.lostDeclaration`: Exposes CRUD operations for the **LostDeclaration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LostDeclarations
    * const lostDeclarations = await prisma.lostDeclaration.findMany()
    * ```
    */
  get lostDeclaration(): Prisma.LostDeclarationDelegate<GlobalReject>;

  /**
   * `prisma.foundDeclaration`: Exposes CRUD operations for the **FoundDeclaration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoundDeclarations
    * const foundDeclarations = await prisma.foundDeclaration.findMany()
    * ```
    */
  get foundDeclaration(): Prisma.FoundDeclarationDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.commentDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **Response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.ResponseDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Product: 'Product',
    Announcement: 'Announcement',
    Animal: 'Animal',
    LostDeclaration: 'LostDeclaration',
    FoundDeclaration: 'FoundDeclaration',
    comment: 'comment',
    Post: 'Post',
    Response: 'Response'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Product: number
    announcement: number
    Animal: number
    comment: number
    Post: number
    Response: number
  }

  export type UserCountOutputTypeSelect = {
    Product?: boolean
    announcement?: boolean
    Animal?: boolean
    comment?: boolean
    Post?: boolean
    Response?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AnnouncementCountOutputType
   */


  export type AnnouncementCountOutputType = {
    comment: number
  }

  export type AnnouncementCountOutputTypeSelect = {
    comment?: boolean
  }

  export type AnnouncementCountOutputTypeGetPayload<S extends boolean | null | undefined | AnnouncementCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AnnouncementCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AnnouncementCountOutputTypeArgs)
    ? AnnouncementCountOutputType 
    : S extends { select: any } & (AnnouncementCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AnnouncementCountOutputType ? AnnouncementCountOutputType[P] : never
  } 
      : AnnouncementCountOutputType




  // Custom InputTypes

  /**
   * AnnouncementCountOutputType without action
   */
  export type AnnouncementCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnnouncementCountOutputType
     */
    select?: AnnouncementCountOutputTypeSelect | null
  }



  /**
   * Count Type PostCountOutputType
   */


  export type PostCountOutputType = {
    Response: number
  }

  export type PostCountOutputTypeSelect = {
    Response?: boolean
  }

  export type PostCountOutputTypeGetPayload<S extends boolean | null | undefined | PostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PostCountOutputTypeArgs)
    ? PostCountOutputType 
    : S extends { select: any } & (PostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostCountOutputType ? PostCountOutputType[P] : never
  } 
      : PostCountOutputType




  // Custom InputTypes

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    photo: string | null
    password: string | null
    phoneNumber: string | null
    role: Role | null
    createdAt: string | null
    updatedAt: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    photo: string | null
    password: string | null
    phoneNumber: string | null
    role: Role | null
    createdAt: string | null
    updatedAt: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    photo: number
    password: number
    phoneNumber: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    photo?: true
    password?: true
    phoneNumber?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    photo?: true
    password?: true
    phoneNumber?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    photo?: true
    password?: true
    phoneNumber?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    photo?: boolean
    password?: boolean
    phoneNumber?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | User$ProductArgs
    announcement?: boolean | User$announcementArgs
    Animal?: boolean | User$AnimalArgs
    comment?: boolean | User$commentArgs
    Post?: boolean | User$PostArgs
    Response?: boolean | User$ResponseArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Product?: boolean | User$ProductArgs
    announcement?: boolean | User$announcementArgs
    Animal?: boolean | User$AnimalArgs
    comment?: boolean | User$commentArgs
    Post?: boolean | User$PostArgs
    Response?: boolean | User$ResponseArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Product' ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends 'announcement' ? Array < AnnouncementGetPayload<S['include'][P]>>  :
        P extends 'Animal' ? Array < AnimalGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends 'Post' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Product' ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends 'announcement' ? Array < AnnouncementGetPayload<S['select'][P]>>  :
        P extends 'Animal' ? Array < AnimalGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends 'Post' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Product<T extends User$ProductArgs= {}>(args?: Subset<T, User$ProductArgs>): Prisma.PrismaPromise<Array<ProductGetPayload<T>>| Null>;

    announcement<T extends User$announcementArgs= {}>(args?: Subset<T, User$announcementArgs>): Prisma.PrismaPromise<Array<AnnouncementGetPayload<T>>| Null>;

    Animal<T extends User$AnimalArgs= {}>(args?: Subset<T, User$AnimalArgs>): Prisma.PrismaPromise<Array<AnimalGetPayload<T>>| Null>;

    comment<T extends User$commentArgs= {}>(args?: Subset<T, User$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    Post<T extends User$PostArgs= {}>(args?: Subset<T, User$PostArgs>): Prisma.PrismaPromise<Array<PostGetPayload<T>>| Null>;

    Response<T extends User$ResponseArgs= {}>(args?: Subset<T, User$ResponseArgs>): Prisma.PrismaPromise<Array<ResponseGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Product
   */
  export type User$ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * User.announcement
   */
  export type User$announcementArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    where?: AnnouncementWhereInput
    orderBy?: Enumerable<AnnouncementOrderByWithRelationInput>
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnnouncementScalarFieldEnum>
  }


  /**
   * User.Animal
   */
  export type User$AnimalArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    where?: AnimalWhereInput
    orderBy?: Enumerable<AnimalOrderByWithRelationInput>
    cursor?: AnimalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnimalScalarFieldEnum>
  }


  /**
   * User.comment
   */
  export type User$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * User.Post
   */
  export type User$PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * User.Response
   */
  export type User$ResponseArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    where?: ResponseWhereInput
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    cursor?: ResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    userId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    userId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    category: Category | null
    brandProduct: string | null
    description: string | null
    animalCible: string | null
    image: string | null
    price: number | null
    isDispo: boolean | null
    userId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    category: Category | null
    brandProduct: string | null
    description: string | null
    animalCible: string | null
    image: string | null
    price: number | null
    isDispo: boolean | null
    userId: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    category: number
    brandProduct: number
    description: number
    animalCible: number
    image: number
    price: number
    isDispo: number
    userId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    userId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    userId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    category?: true
    brandProduct?: true
    description?: true
    animalCible?: true
    image?: true
    price?: true
    isDispo?: true
    userId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    category?: true
    brandProduct?: true
    description?: true
    animalCible?: true
    image?: true
    price?: true
    isDispo?: true
    userId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    category?: true
    brandProduct?: true
    description?: true
    animalCible?: true
    image?: true
    price?: true
    isDispo?: true
    userId?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
    userId: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    category?: boolean
    brandProduct?: boolean
    description?: boolean
    animalCible?: boolean
    image?: boolean
    price?: boolean
    isDispo?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }


  export type ProductInclude = {
    user?: boolean | UserArgs
  }

  export type ProductGetPayload<S extends boolean | null | undefined | ProductArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Product :
    S extends undefined ? never :
    S extends { include: any } & (ProductArgs | ProductFindManyArgs)
    ? Product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductArgs | ProductFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
      : Product


  type ProductCountArgs = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProductGetPayload<T>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     */
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
  }



  /**
   * Model Announcement
   */


  export type AggregateAnnouncement = {
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  export type AnnouncementAvgAggregateOutputType = {
    id: number | null
    experience: number | null
    userId: number | null
  }

  export type AnnouncementSumAggregateOutputType = {
    id: number | null
    experience: number | null
    userId: number | null
  }

  export type AnnouncementMinAggregateOutputType = {
    id: number | null
    type: Service | null
    firstName: string | null
    lastName: string | null
    contact: string | null
    ville: string | null
    experience: number | null
    level: Level | null
    image: string | null
    description: string | null
    city: string | null
    userId: number | null
  }

  export type AnnouncementMaxAggregateOutputType = {
    id: number | null
    type: Service | null
    firstName: string | null
    lastName: string | null
    contact: string | null
    ville: string | null
    experience: number | null
    level: Level | null
    image: string | null
    description: string | null
    city: string | null
    userId: number | null
  }

  export type AnnouncementCountAggregateOutputType = {
    id: number
    type: number
    firstName: number
    lastName: number
    contact: number
    ville: number
    experience: number
    level: number
    image: number
    description: number
    city: number
    userId: number
    _all: number
  }


  export type AnnouncementAvgAggregateInputType = {
    id?: true
    experience?: true
    userId?: true
  }

  export type AnnouncementSumAggregateInputType = {
    id?: true
    experience?: true
    userId?: true
  }

  export type AnnouncementMinAggregateInputType = {
    id?: true
    type?: true
    firstName?: true
    lastName?: true
    contact?: true
    ville?: true
    experience?: true
    level?: true
    image?: true
    description?: true
    city?: true
    userId?: true
  }

  export type AnnouncementMaxAggregateInputType = {
    id?: true
    type?: true
    firstName?: true
    lastName?: true
    contact?: true
    ville?: true
    experience?: true
    level?: true
    image?: true
    description?: true
    city?: true
    userId?: true
  }

  export type AnnouncementCountAggregateInputType = {
    id?: true
    type?: true
    firstName?: true
    lastName?: true
    contact?: true
    ville?: true
    experience?: true
    level?: true
    image?: true
    description?: true
    city?: true
    userId?: true
    _all?: true
  }

  export type AnnouncementAggregateArgs = {
    /**
     * Filter which Announcement to aggregate.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: Enumerable<AnnouncementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Announcements
    **/
    _count?: true | AnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnnouncementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnnouncementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnnouncementMaxAggregateInputType
  }

  export type GetAnnouncementAggregateType<T extends AnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnnouncement[P]>
      : GetScalarType<T[P], AggregateAnnouncement[P]>
  }




  export type AnnouncementGroupByArgs = {
    where?: AnnouncementWhereInput
    orderBy?: Enumerable<AnnouncementOrderByWithAggregationInput>
    by: AnnouncementScalarFieldEnum[]
    having?: AnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnnouncementCountAggregateInputType | true
    _avg?: AnnouncementAvgAggregateInputType
    _sum?: AnnouncementSumAggregateInputType
    _min?: AnnouncementMinAggregateInputType
    _max?: AnnouncementMaxAggregateInputType
  }


  export type AnnouncementGroupByOutputType = {
    id: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    userId: number
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  type GetAnnouncementGroupByPayload<T extends AnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type AnnouncementSelect = {
    id?: boolean
    type?: boolean
    firstName?: boolean
    lastName?: boolean
    contact?: boolean
    ville?: boolean
    experience?: boolean
    level?: boolean
    image?: boolean
    description?: boolean
    city?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    comment?: boolean | Announcement$commentArgs
    _count?: boolean | AnnouncementCountOutputTypeArgs
  }


  export type AnnouncementInclude = {
    user?: boolean | UserArgs
    comment?: boolean | Announcement$commentArgs
    _count?: boolean | AnnouncementCountOutputTypeArgs
  }

  export type AnnouncementGetPayload<S extends boolean | null | undefined | AnnouncementArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Announcement :
    S extends undefined ? never :
    S extends { include: any } & (AnnouncementArgs | AnnouncementFindManyArgs)
    ? Announcement  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends '_count' ? AnnouncementCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AnnouncementArgs | AnnouncementFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends '_count' ? AnnouncementCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Announcement ? Announcement[P] : never
  } 
      : Announcement


  type AnnouncementCountArgs = 
    Omit<AnnouncementFindManyArgs, 'select' | 'include'> & {
      select?: AnnouncementCountAggregateInputType | true
    }

  export interface AnnouncementDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Announcement that matches the filter.
     * @param {AnnouncementFindUniqueArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnnouncementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnnouncementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Announcement'> extends True ? Prisma__AnnouncementClient<AnnouncementGetPayload<T>> : Prisma__AnnouncementClient<AnnouncementGetPayload<T> | null, null>

    /**
     * Find one Announcement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnnouncementFindUniqueOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnnouncementFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnnouncementFindUniqueOrThrowArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Find the first Announcement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnnouncementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnnouncementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Announcement'> extends True ? Prisma__AnnouncementClient<AnnouncementGetPayload<T>> : Prisma__AnnouncementClient<AnnouncementGetPayload<T> | null, null>

    /**
     * Find the first Announcement that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnnouncementFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnnouncementFindFirstOrThrowArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Find zero or more Announcements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Announcements
     * const announcements = await prisma.announcement.findMany()
     * 
     * // Get first 10 Announcements
     * const announcements = await prisma.announcement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const announcementWithIdOnly = await prisma.announcement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnnouncementFindManyArgs>(
      args?: SelectSubset<T, AnnouncementFindManyArgs>
    ): Prisma.PrismaPromise<Array<AnnouncementGetPayload<T>>>

    /**
     * Create a Announcement.
     * @param {AnnouncementCreateArgs} args - Arguments to create a Announcement.
     * @example
     * // Create one Announcement
     * const Announcement = await prisma.announcement.create({
     *   data: {
     *     // ... data to create a Announcement
     *   }
     * })
     * 
    **/
    create<T extends AnnouncementCreateArgs>(
      args: SelectSubset<T, AnnouncementCreateArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Create many Announcements.
     *     @param {AnnouncementCreateManyArgs} args - Arguments to create many Announcements.
     *     @example
     *     // Create many Announcements
     *     const announcement = await prisma.announcement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnnouncementCreateManyArgs>(
      args?: SelectSubset<T, AnnouncementCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Announcement.
     * @param {AnnouncementDeleteArgs} args - Arguments to delete one Announcement.
     * @example
     * // Delete one Announcement
     * const Announcement = await prisma.announcement.delete({
     *   where: {
     *     // ... filter to delete one Announcement
     *   }
     * })
     * 
    **/
    delete<T extends AnnouncementDeleteArgs>(
      args: SelectSubset<T, AnnouncementDeleteArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Update one Announcement.
     * @param {AnnouncementUpdateArgs} args - Arguments to update one Announcement.
     * @example
     * // Update one Announcement
     * const announcement = await prisma.announcement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnnouncementUpdateArgs>(
      args: SelectSubset<T, AnnouncementUpdateArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Delete zero or more Announcements.
     * @param {AnnouncementDeleteManyArgs} args - Arguments to filter Announcements to delete.
     * @example
     * // Delete a few Announcements
     * const { count } = await prisma.announcement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnnouncementDeleteManyArgs>(
      args?: SelectSubset<T, AnnouncementDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnnouncementUpdateManyArgs>(
      args: SelectSubset<T, AnnouncementUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Announcement.
     * @param {AnnouncementUpsertArgs} args - Arguments to update or create a Announcement.
     * @example
     * // Update or create a Announcement
     * const announcement = await prisma.announcement.upsert({
     *   create: {
     *     // ... data to create a Announcement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Announcement we want to update
     *   }
     * })
    **/
    upsert<T extends AnnouncementUpsertArgs>(
      args: SelectSubset<T, AnnouncementUpsertArgs>
    ): Prisma__AnnouncementClient<AnnouncementGetPayload<T>>

    /**
     * Count the number of Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementCountArgs} args - Arguments to filter Announcements to count.
     * @example
     * // Count the number of Announcements
     * const count = await prisma.announcement.count({
     *   where: {
     *     // ... the filter for the Announcements we want to count
     *   }
     * })
    **/
    count<T extends AnnouncementCountArgs>(
      args?: Subset<T, AnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnnouncementAggregateArgs>(args: Subset<T, AnnouncementAggregateArgs>): Prisma.PrismaPromise<GetAnnouncementAggregateType<T>>

    /**
     * Group by Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: AnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Announcement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnnouncementClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    comment<T extends Announcement$commentArgs= {}>(args?: Subset<T, Announcement$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Announcement base type for findUnique actions
   */
  export type AnnouncementFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findUnique
   */
  export interface AnnouncementFindUniqueArgs extends AnnouncementFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Announcement findUniqueOrThrow
   */
  export type AnnouncementFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }


  /**
   * Announcement base type for findFirst actions
   */
  export type AnnouncementFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: Enumerable<AnnouncementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: Enumerable<AnnouncementScalarFieldEnum>
  }

  /**
   * Announcement findFirst
   */
  export interface AnnouncementFindFirstArgs extends AnnouncementFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Announcement findFirstOrThrow
   */
  export type AnnouncementFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: Enumerable<AnnouncementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: Enumerable<AnnouncementScalarFieldEnum>
  }


  /**
   * Announcement findMany
   */
  export type AnnouncementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter, which Announcements to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: Enumerable<AnnouncementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    distinct?: Enumerable<AnnouncementScalarFieldEnum>
  }


  /**
   * Announcement create
   */
  export type AnnouncementCreateArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * The data needed to create a Announcement.
     */
    data: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
  }


  /**
   * Announcement createMany
   */
  export type AnnouncementCreateManyArgs = {
    /**
     * The data used to create many Announcements.
     */
    data: Enumerable<AnnouncementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Announcement update
   */
  export type AnnouncementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * The data needed to update a Announcement.
     */
    data: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
    /**
     * Choose, which Announcement to update.
     */
    where: AnnouncementWhereUniqueInput
  }


  /**
   * Announcement updateMany
   */
  export type AnnouncementUpdateManyArgs = {
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
  }


  /**
   * Announcement upsert
   */
  export type AnnouncementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * The filter to search for the Announcement to update in case it exists.
     */
    where: AnnouncementWhereUniqueInput
    /**
     * In case the Announcement found by the `where` argument doesn't exist, create a new Announcement with this data.
     */
    create: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
    /**
     * In case the Announcement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
  }


  /**
   * Announcement delete
   */
  export type AnnouncementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
    /**
     * Filter which Announcement to delete.
     */
    where: AnnouncementWhereUniqueInput
  }


  /**
   * Announcement deleteMany
   */
  export type AnnouncementDeleteManyArgs = {
    /**
     * Filter which Announcements to delete
     */
    where?: AnnouncementWhereInput
  }


  /**
   * Announcement.comment
   */
  export type Announcement$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Announcement without action
   */
  export type AnnouncementArgs = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnnouncementInclude | null
  }



  /**
   * Model Animal
   */


  export type AggregateAnimal = {
    _count: AnimalCountAggregateOutputType | null
    _avg: AnimalAvgAggregateOutputType | null
    _sum: AnimalSumAggregateOutputType | null
    _min: AnimalMinAggregateOutputType | null
    _max: AnimalMaxAggregateOutputType | null
  }

  export type AnimalAvgAggregateOutputType = {
    id: number | null
    age: number | null
    price: number | null
    userId: number | null
  }

  export type AnimalSumAggregateOutputType = {
    id: number | null
    age: number | null
    price: number | null
    userId: number | null
  }

  export type AnimalMinAggregateOutputType = {
    id: number | null
    species: string | null
    race: string | null
    dateOfBirth: string | null
    name: string | null
    description: string | null
    age: number | null
    isVaccinated: boolean | null
    isEducated: boolean | null
    gender: gender | null
    status: status | null
    price: number | null
    image: string | null
    userId: number | null
  }

  export type AnimalMaxAggregateOutputType = {
    id: number | null
    species: string | null
    race: string | null
    dateOfBirth: string | null
    name: string | null
    description: string | null
    age: number | null
    isVaccinated: boolean | null
    isEducated: boolean | null
    gender: gender | null
    status: status | null
    price: number | null
    image: string | null
    userId: number | null
  }

  export type AnimalCountAggregateOutputType = {
    id: number
    species: number
    race: number
    dateOfBirth: number
    name: number
    description: number
    age: number
    isVaccinated: number
    isEducated: number
    gender: number
    status: number
    price: number
    image: number
    userId: number
    _all: number
  }


  export type AnimalAvgAggregateInputType = {
    id?: true
    age?: true
    price?: true
    userId?: true
  }

  export type AnimalSumAggregateInputType = {
    id?: true
    age?: true
    price?: true
    userId?: true
  }

  export type AnimalMinAggregateInputType = {
    id?: true
    species?: true
    race?: true
    dateOfBirth?: true
    name?: true
    description?: true
    age?: true
    isVaccinated?: true
    isEducated?: true
    gender?: true
    status?: true
    price?: true
    image?: true
    userId?: true
  }

  export type AnimalMaxAggregateInputType = {
    id?: true
    species?: true
    race?: true
    dateOfBirth?: true
    name?: true
    description?: true
    age?: true
    isVaccinated?: true
    isEducated?: true
    gender?: true
    status?: true
    price?: true
    image?: true
    userId?: true
  }

  export type AnimalCountAggregateInputType = {
    id?: true
    species?: true
    race?: true
    dateOfBirth?: true
    name?: true
    description?: true
    age?: true
    isVaccinated?: true
    isEducated?: true
    gender?: true
    status?: true
    price?: true
    image?: true
    userId?: true
    _all?: true
  }

  export type AnimalAggregateArgs = {
    /**
     * Filter which Animal to aggregate.
     */
    where?: AnimalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animals to fetch.
     */
    orderBy?: Enumerable<AnimalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Animals
    **/
    _count?: true | AnimalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimalMaxAggregateInputType
  }

  export type GetAnimalAggregateType<T extends AnimalAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimal[P]>
      : GetScalarType<T[P], AggregateAnimal[P]>
  }




  export type AnimalGroupByArgs = {
    where?: AnimalWhereInput
    orderBy?: Enumerable<AnimalOrderByWithAggregationInput>
    by: AnimalScalarFieldEnum[]
    having?: AnimalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimalCountAggregateInputType | true
    _avg?: AnimalAvgAggregateInputType
    _sum?: AnimalSumAggregateInputType
    _min?: AnimalMinAggregateInputType
    _max?: AnimalMaxAggregateInputType
  }


  export type AnimalGroupByOutputType = {
    id: number
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
    userId: number
    _count: AnimalCountAggregateOutputType | null
    _avg: AnimalAvgAggregateOutputType | null
    _sum: AnimalSumAggregateOutputType | null
    _min: AnimalMinAggregateOutputType | null
    _max: AnimalMaxAggregateOutputType | null
  }

  type GetAnimalGroupByPayload<T extends AnimalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnimalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimalGroupByOutputType[P]>
            : GetScalarType<T[P], AnimalGroupByOutputType[P]>
        }
      >
    >


  export type AnimalSelect = {
    id?: boolean
    species?: boolean
    race?: boolean
    dateOfBirth?: boolean
    name?: boolean
    description?: boolean
    age?: boolean
    isVaccinated?: boolean
    isEducated?: boolean
    gender?: boolean
    status?: boolean
    price?: boolean
    image?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }


  export type AnimalInclude = {
    user?: boolean | UserArgs
  }

  export type AnimalGetPayload<S extends boolean | null | undefined | AnimalArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Animal :
    S extends undefined ? never :
    S extends { include: any } & (AnimalArgs | AnimalFindManyArgs)
    ? Animal  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AnimalArgs | AnimalFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Animal ? Animal[P] : never
  } 
      : Animal


  type AnimalCountArgs = 
    Omit<AnimalFindManyArgs, 'select' | 'include'> & {
      select?: AnimalCountAggregateInputType | true
    }

  export interface AnimalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Animal that matches the filter.
     * @param {AnimalFindUniqueArgs} args - Arguments to find a Animal
     * @example
     * // Get one Animal
     * const animal = await prisma.animal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnimalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Animal'> extends True ? Prisma__AnimalClient<AnimalGetPayload<T>> : Prisma__AnimalClient<AnimalGetPayload<T> | null, null>

    /**
     * Find one Animal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnimalFindUniqueOrThrowArgs} args - Arguments to find a Animal
     * @example
     * // Get one Animal
     * const animal = await prisma.animal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnimalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnimalFindUniqueOrThrowArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Find the first Animal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalFindFirstArgs} args - Arguments to find a Animal
     * @example
     * // Get one Animal
     * const animal = await prisma.animal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnimalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Animal'> extends True ? Prisma__AnimalClient<AnimalGetPayload<T>> : Prisma__AnimalClient<AnimalGetPayload<T> | null, null>

    /**
     * Find the first Animal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalFindFirstOrThrowArgs} args - Arguments to find a Animal
     * @example
     * // Get one Animal
     * const animal = await prisma.animal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnimalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnimalFindFirstOrThrowArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Find zero or more Animals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animals
     * const animals = await prisma.animal.findMany()
     * 
     * // Get first 10 Animals
     * const animals = await prisma.animal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animalWithIdOnly = await prisma.animal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimalFindManyArgs>(
      args?: SelectSubset<T, AnimalFindManyArgs>
    ): Prisma.PrismaPromise<Array<AnimalGetPayload<T>>>

    /**
     * Create a Animal.
     * @param {AnimalCreateArgs} args - Arguments to create a Animal.
     * @example
     * // Create one Animal
     * const Animal = await prisma.animal.create({
     *   data: {
     *     // ... data to create a Animal
     *   }
     * })
     * 
    **/
    create<T extends AnimalCreateArgs>(
      args: SelectSubset<T, AnimalCreateArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Create many Animals.
     *     @param {AnimalCreateManyArgs} args - Arguments to create many Animals.
     *     @example
     *     // Create many Animals
     *     const animal = await prisma.animal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnimalCreateManyArgs>(
      args?: SelectSubset<T, AnimalCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Animal.
     * @param {AnimalDeleteArgs} args - Arguments to delete one Animal.
     * @example
     * // Delete one Animal
     * const Animal = await prisma.animal.delete({
     *   where: {
     *     // ... filter to delete one Animal
     *   }
     * })
     * 
    **/
    delete<T extends AnimalDeleteArgs>(
      args: SelectSubset<T, AnimalDeleteArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Update one Animal.
     * @param {AnimalUpdateArgs} args - Arguments to update one Animal.
     * @example
     * // Update one Animal
     * const animal = await prisma.animal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimalUpdateArgs>(
      args: SelectSubset<T, AnimalUpdateArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Delete zero or more Animals.
     * @param {AnimalDeleteManyArgs} args - Arguments to filter Animals to delete.
     * @example
     * // Delete a few Animals
     * const { count } = await prisma.animal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimalDeleteManyArgs>(
      args?: SelectSubset<T, AnimalDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animals
     * const animal = await prisma.animal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimalUpdateManyArgs>(
      args: SelectSubset<T, AnimalUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Animal.
     * @param {AnimalUpsertArgs} args - Arguments to update or create a Animal.
     * @example
     * // Update or create a Animal
     * const animal = await prisma.animal.upsert({
     *   create: {
     *     // ... data to create a Animal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animal we want to update
     *   }
     * })
    **/
    upsert<T extends AnimalUpsertArgs>(
      args: SelectSubset<T, AnimalUpsertArgs>
    ): Prisma__AnimalClient<AnimalGetPayload<T>>

    /**
     * Count the number of Animals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalCountArgs} args - Arguments to filter Animals to count.
     * @example
     * // Count the number of Animals
     * const count = await prisma.animal.count({
     *   where: {
     *     // ... the filter for the Animals we want to count
     *   }
     * })
    **/
    count<T extends AnimalCountArgs>(
      args?: Subset<T, AnimalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimalAggregateArgs>(args: Subset<T, AnimalAggregateArgs>): Prisma.PrismaPromise<GetAnimalAggregateType<T>>

    /**
     * Group by Animal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimalGroupByArgs['orderBy'] }
        : { orderBy?: AnimalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Animal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnimalClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Animal base type for findUnique actions
   */
  export type AnimalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter, which Animal to fetch.
     */
    where: AnimalWhereUniqueInput
  }

  /**
   * Animal findUnique
   */
  export interface AnimalFindUniqueArgs extends AnimalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Animal findUniqueOrThrow
   */
  export type AnimalFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter, which Animal to fetch.
     */
    where: AnimalWhereUniqueInput
  }


  /**
   * Animal base type for findFirst actions
   */
  export type AnimalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter, which Animal to fetch.
     */
    where?: AnimalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animals to fetch.
     */
    orderBy?: Enumerable<AnimalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animals.
     */
    cursor?: AnimalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animals.
     */
    distinct?: Enumerable<AnimalScalarFieldEnum>
  }

  /**
   * Animal findFirst
   */
  export interface AnimalFindFirstArgs extends AnimalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Animal findFirstOrThrow
   */
  export type AnimalFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter, which Animal to fetch.
     */
    where?: AnimalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animals to fetch.
     */
    orderBy?: Enumerable<AnimalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animals.
     */
    cursor?: AnimalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animals.
     */
    distinct?: Enumerable<AnimalScalarFieldEnum>
  }


  /**
   * Animal findMany
   */
  export type AnimalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter, which Animals to fetch.
     */
    where?: AnimalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animals to fetch.
     */
    orderBy?: Enumerable<AnimalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Animals.
     */
    cursor?: AnimalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animals.
     */
    skip?: number
    distinct?: Enumerable<AnimalScalarFieldEnum>
  }


  /**
   * Animal create
   */
  export type AnimalCreateArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * The data needed to create a Animal.
     */
    data: XOR<AnimalCreateInput, AnimalUncheckedCreateInput>
  }


  /**
   * Animal createMany
   */
  export type AnimalCreateManyArgs = {
    /**
     * The data used to create many Animals.
     */
    data: Enumerable<AnimalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Animal update
   */
  export type AnimalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * The data needed to update a Animal.
     */
    data: XOR<AnimalUpdateInput, AnimalUncheckedUpdateInput>
    /**
     * Choose, which Animal to update.
     */
    where: AnimalWhereUniqueInput
  }


  /**
   * Animal updateMany
   */
  export type AnimalUpdateManyArgs = {
    /**
     * The data used to update Animals.
     */
    data: XOR<AnimalUpdateManyMutationInput, AnimalUncheckedUpdateManyInput>
    /**
     * Filter which Animals to update
     */
    where?: AnimalWhereInput
  }


  /**
   * Animal upsert
   */
  export type AnimalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * The filter to search for the Animal to update in case it exists.
     */
    where: AnimalWhereUniqueInput
    /**
     * In case the Animal found by the `where` argument doesn't exist, create a new Animal with this data.
     */
    create: XOR<AnimalCreateInput, AnimalUncheckedCreateInput>
    /**
     * In case the Animal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimalUpdateInput, AnimalUncheckedUpdateInput>
  }


  /**
   * Animal delete
   */
  export type AnimalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
    /**
     * Filter which Animal to delete.
     */
    where: AnimalWhereUniqueInput
  }


  /**
   * Animal deleteMany
   */
  export type AnimalDeleteManyArgs = {
    /**
     * Filter which Animals to delete
     */
    where?: AnimalWhereInput
  }


  /**
   * Animal without action
   */
  export type AnimalArgs = {
    /**
     * Select specific fields to fetch from the Animal
     */
    select?: AnimalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimalInclude | null
  }



  /**
   * Model LostDeclaration
   */


  export type AggregateLostDeclaration = {
    _count: LostDeclarationCountAggregateOutputType | null
    _avg: LostDeclarationAvgAggregateOutputType | null
    _sum: LostDeclarationSumAggregateOutputType | null
    _min: LostDeclarationMinAggregateOutputType | null
    _max: LostDeclarationMaxAggregateOutputType | null
  }

  export type LostDeclarationAvgAggregateOutputType = {
    id: number | null
  }

  export type LostDeclarationSumAggregateOutputType = {
    id: number | null
  }

  export type LostDeclarationMinAggregateOutputType = {
    id: number | null
    image: string | null
    animal: typeAnimal | null
    race: string | null
    description: string | null
    dateLost: string | null
    placeLost: string | null
    phoneNumber: string | null
    withReward: boolean | null
  }

  export type LostDeclarationMaxAggregateOutputType = {
    id: number | null
    image: string | null
    animal: typeAnimal | null
    race: string | null
    description: string | null
    dateLost: string | null
    placeLost: string | null
    phoneNumber: string | null
    withReward: boolean | null
  }

  export type LostDeclarationCountAggregateOutputType = {
    id: number
    image: number
    animal: number
    race: number
    description: number
    dateLost: number
    placeLost: number
    phoneNumber: number
    withReward: number
    _all: number
  }


  export type LostDeclarationAvgAggregateInputType = {
    id?: true
  }

  export type LostDeclarationSumAggregateInputType = {
    id?: true
  }

  export type LostDeclarationMinAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateLost?: true
    placeLost?: true
    phoneNumber?: true
    withReward?: true
  }

  export type LostDeclarationMaxAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateLost?: true
    placeLost?: true
    phoneNumber?: true
    withReward?: true
  }

  export type LostDeclarationCountAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateLost?: true
    placeLost?: true
    phoneNumber?: true
    withReward?: true
    _all?: true
  }

  export type LostDeclarationAggregateArgs = {
    /**
     * Filter which LostDeclaration to aggregate.
     */
    where?: LostDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LostDeclarations to fetch.
     */
    orderBy?: Enumerable<LostDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LostDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LostDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LostDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LostDeclarations
    **/
    _count?: true | LostDeclarationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LostDeclarationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LostDeclarationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LostDeclarationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LostDeclarationMaxAggregateInputType
  }

  export type GetLostDeclarationAggregateType<T extends LostDeclarationAggregateArgs> = {
        [P in keyof T & keyof AggregateLostDeclaration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLostDeclaration[P]>
      : GetScalarType<T[P], AggregateLostDeclaration[P]>
  }




  export type LostDeclarationGroupByArgs = {
    where?: LostDeclarationWhereInput
    orderBy?: Enumerable<LostDeclarationOrderByWithAggregationInput>
    by: LostDeclarationScalarFieldEnum[]
    having?: LostDeclarationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LostDeclarationCountAggregateInputType | true
    _avg?: LostDeclarationAvgAggregateInputType
    _sum?: LostDeclarationSumAggregateInputType
    _min?: LostDeclarationMinAggregateInputType
    _max?: LostDeclarationMaxAggregateInputType
  }


  export type LostDeclarationGroupByOutputType = {
    id: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateLost: string
    placeLost: string
    phoneNumber: string
    withReward: boolean
    _count: LostDeclarationCountAggregateOutputType | null
    _avg: LostDeclarationAvgAggregateOutputType | null
    _sum: LostDeclarationSumAggregateOutputType | null
    _min: LostDeclarationMinAggregateOutputType | null
    _max: LostDeclarationMaxAggregateOutputType | null
  }

  type GetLostDeclarationGroupByPayload<T extends LostDeclarationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LostDeclarationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LostDeclarationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LostDeclarationGroupByOutputType[P]>
            : GetScalarType<T[P], LostDeclarationGroupByOutputType[P]>
        }
      >
    >


  export type LostDeclarationSelect = {
    id?: boolean
    image?: boolean
    animal?: boolean
    race?: boolean
    description?: boolean
    dateLost?: boolean
    placeLost?: boolean
    phoneNumber?: boolean
    withReward?: boolean
  }


  export type LostDeclarationGetPayload<S extends boolean | null | undefined | LostDeclarationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LostDeclaration :
    S extends undefined ? never :
    S extends { include: any } & (LostDeclarationArgs | LostDeclarationFindManyArgs)
    ? LostDeclaration 
    : S extends { select: any } & (LostDeclarationArgs | LostDeclarationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LostDeclaration ? LostDeclaration[P] : never
  } 
      : LostDeclaration


  type LostDeclarationCountArgs = 
    Omit<LostDeclarationFindManyArgs, 'select' | 'include'> & {
      select?: LostDeclarationCountAggregateInputType | true
    }

  export interface LostDeclarationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LostDeclaration that matches the filter.
     * @param {LostDeclarationFindUniqueArgs} args - Arguments to find a LostDeclaration
     * @example
     * // Get one LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LostDeclarationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LostDeclarationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LostDeclaration'> extends True ? Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>> : Prisma__LostDeclarationClient<LostDeclarationGetPayload<T> | null, null>

    /**
     * Find one LostDeclaration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LostDeclarationFindUniqueOrThrowArgs} args - Arguments to find a LostDeclaration
     * @example
     * // Get one LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LostDeclarationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LostDeclarationFindUniqueOrThrowArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Find the first LostDeclaration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationFindFirstArgs} args - Arguments to find a LostDeclaration
     * @example
     * // Get one LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LostDeclarationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LostDeclarationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LostDeclaration'> extends True ? Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>> : Prisma__LostDeclarationClient<LostDeclarationGetPayload<T> | null, null>

    /**
     * Find the first LostDeclaration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationFindFirstOrThrowArgs} args - Arguments to find a LostDeclaration
     * @example
     * // Get one LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LostDeclarationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LostDeclarationFindFirstOrThrowArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Find zero or more LostDeclarations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LostDeclarations
     * const lostDeclarations = await prisma.lostDeclaration.findMany()
     * 
     * // Get first 10 LostDeclarations
     * const lostDeclarations = await prisma.lostDeclaration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lostDeclarationWithIdOnly = await prisma.lostDeclaration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LostDeclarationFindManyArgs>(
      args?: SelectSubset<T, LostDeclarationFindManyArgs>
    ): Prisma.PrismaPromise<Array<LostDeclarationGetPayload<T>>>

    /**
     * Create a LostDeclaration.
     * @param {LostDeclarationCreateArgs} args - Arguments to create a LostDeclaration.
     * @example
     * // Create one LostDeclaration
     * const LostDeclaration = await prisma.lostDeclaration.create({
     *   data: {
     *     // ... data to create a LostDeclaration
     *   }
     * })
     * 
    **/
    create<T extends LostDeclarationCreateArgs>(
      args: SelectSubset<T, LostDeclarationCreateArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Create many LostDeclarations.
     *     @param {LostDeclarationCreateManyArgs} args - Arguments to create many LostDeclarations.
     *     @example
     *     // Create many LostDeclarations
     *     const lostDeclaration = await prisma.lostDeclaration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LostDeclarationCreateManyArgs>(
      args?: SelectSubset<T, LostDeclarationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LostDeclaration.
     * @param {LostDeclarationDeleteArgs} args - Arguments to delete one LostDeclaration.
     * @example
     * // Delete one LostDeclaration
     * const LostDeclaration = await prisma.lostDeclaration.delete({
     *   where: {
     *     // ... filter to delete one LostDeclaration
     *   }
     * })
     * 
    **/
    delete<T extends LostDeclarationDeleteArgs>(
      args: SelectSubset<T, LostDeclarationDeleteArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Update one LostDeclaration.
     * @param {LostDeclarationUpdateArgs} args - Arguments to update one LostDeclaration.
     * @example
     * // Update one LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LostDeclarationUpdateArgs>(
      args: SelectSubset<T, LostDeclarationUpdateArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Delete zero or more LostDeclarations.
     * @param {LostDeclarationDeleteManyArgs} args - Arguments to filter LostDeclarations to delete.
     * @example
     * // Delete a few LostDeclarations
     * const { count } = await prisma.lostDeclaration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LostDeclarationDeleteManyArgs>(
      args?: SelectSubset<T, LostDeclarationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LostDeclarations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LostDeclarations
     * const lostDeclaration = await prisma.lostDeclaration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LostDeclarationUpdateManyArgs>(
      args: SelectSubset<T, LostDeclarationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LostDeclaration.
     * @param {LostDeclarationUpsertArgs} args - Arguments to update or create a LostDeclaration.
     * @example
     * // Update or create a LostDeclaration
     * const lostDeclaration = await prisma.lostDeclaration.upsert({
     *   create: {
     *     // ... data to create a LostDeclaration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LostDeclaration we want to update
     *   }
     * })
    **/
    upsert<T extends LostDeclarationUpsertArgs>(
      args: SelectSubset<T, LostDeclarationUpsertArgs>
    ): Prisma__LostDeclarationClient<LostDeclarationGetPayload<T>>

    /**
     * Count the number of LostDeclarations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationCountArgs} args - Arguments to filter LostDeclarations to count.
     * @example
     * // Count the number of LostDeclarations
     * const count = await prisma.lostDeclaration.count({
     *   where: {
     *     // ... the filter for the LostDeclarations we want to count
     *   }
     * })
    **/
    count<T extends LostDeclarationCountArgs>(
      args?: Subset<T, LostDeclarationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LostDeclarationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LostDeclaration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LostDeclarationAggregateArgs>(args: Subset<T, LostDeclarationAggregateArgs>): Prisma.PrismaPromise<GetLostDeclarationAggregateType<T>>

    /**
     * Group by LostDeclaration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LostDeclarationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LostDeclarationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LostDeclarationGroupByArgs['orderBy'] }
        : { orderBy?: LostDeclarationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LostDeclarationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLostDeclarationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LostDeclaration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LostDeclarationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LostDeclaration base type for findUnique actions
   */
  export type LostDeclarationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter, which LostDeclaration to fetch.
     */
    where: LostDeclarationWhereUniqueInput
  }

  /**
   * LostDeclaration findUnique
   */
  export interface LostDeclarationFindUniqueArgs extends LostDeclarationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LostDeclaration findUniqueOrThrow
   */
  export type LostDeclarationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter, which LostDeclaration to fetch.
     */
    where: LostDeclarationWhereUniqueInput
  }


  /**
   * LostDeclaration base type for findFirst actions
   */
  export type LostDeclarationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter, which LostDeclaration to fetch.
     */
    where?: LostDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LostDeclarations to fetch.
     */
    orderBy?: Enumerable<LostDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LostDeclarations.
     */
    cursor?: LostDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LostDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LostDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LostDeclarations.
     */
    distinct?: Enumerable<LostDeclarationScalarFieldEnum>
  }

  /**
   * LostDeclaration findFirst
   */
  export interface LostDeclarationFindFirstArgs extends LostDeclarationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LostDeclaration findFirstOrThrow
   */
  export type LostDeclarationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter, which LostDeclaration to fetch.
     */
    where?: LostDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LostDeclarations to fetch.
     */
    orderBy?: Enumerable<LostDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LostDeclarations.
     */
    cursor?: LostDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LostDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LostDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LostDeclarations.
     */
    distinct?: Enumerable<LostDeclarationScalarFieldEnum>
  }


  /**
   * LostDeclaration findMany
   */
  export type LostDeclarationFindManyArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter, which LostDeclarations to fetch.
     */
    where?: LostDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LostDeclarations to fetch.
     */
    orderBy?: Enumerable<LostDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LostDeclarations.
     */
    cursor?: LostDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LostDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LostDeclarations.
     */
    skip?: number
    distinct?: Enumerable<LostDeclarationScalarFieldEnum>
  }


  /**
   * LostDeclaration create
   */
  export type LostDeclarationCreateArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * The data needed to create a LostDeclaration.
     */
    data: XOR<LostDeclarationCreateInput, LostDeclarationUncheckedCreateInput>
  }


  /**
   * LostDeclaration createMany
   */
  export type LostDeclarationCreateManyArgs = {
    /**
     * The data used to create many LostDeclarations.
     */
    data: Enumerable<LostDeclarationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LostDeclaration update
   */
  export type LostDeclarationUpdateArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * The data needed to update a LostDeclaration.
     */
    data: XOR<LostDeclarationUpdateInput, LostDeclarationUncheckedUpdateInput>
    /**
     * Choose, which LostDeclaration to update.
     */
    where: LostDeclarationWhereUniqueInput
  }


  /**
   * LostDeclaration updateMany
   */
  export type LostDeclarationUpdateManyArgs = {
    /**
     * The data used to update LostDeclarations.
     */
    data: XOR<LostDeclarationUpdateManyMutationInput, LostDeclarationUncheckedUpdateManyInput>
    /**
     * Filter which LostDeclarations to update
     */
    where?: LostDeclarationWhereInput
  }


  /**
   * LostDeclaration upsert
   */
  export type LostDeclarationUpsertArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * The filter to search for the LostDeclaration to update in case it exists.
     */
    where: LostDeclarationWhereUniqueInput
    /**
     * In case the LostDeclaration found by the `where` argument doesn't exist, create a new LostDeclaration with this data.
     */
    create: XOR<LostDeclarationCreateInput, LostDeclarationUncheckedCreateInput>
    /**
     * In case the LostDeclaration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LostDeclarationUpdateInput, LostDeclarationUncheckedUpdateInput>
  }


  /**
   * LostDeclaration delete
   */
  export type LostDeclarationDeleteArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
    /**
     * Filter which LostDeclaration to delete.
     */
    where: LostDeclarationWhereUniqueInput
  }


  /**
   * LostDeclaration deleteMany
   */
  export type LostDeclarationDeleteManyArgs = {
    /**
     * Filter which LostDeclarations to delete
     */
    where?: LostDeclarationWhereInput
  }


  /**
   * LostDeclaration without action
   */
  export type LostDeclarationArgs = {
    /**
     * Select specific fields to fetch from the LostDeclaration
     */
    select?: LostDeclarationSelect | null
  }



  /**
   * Model FoundDeclaration
   */


  export type AggregateFoundDeclaration = {
    _count: FoundDeclarationCountAggregateOutputType | null
    _avg: FoundDeclarationAvgAggregateOutputType | null
    _sum: FoundDeclarationSumAggregateOutputType | null
    _min: FoundDeclarationMinAggregateOutputType | null
    _max: FoundDeclarationMaxAggregateOutputType | null
  }

  export type FoundDeclarationAvgAggregateOutputType = {
    id: number | null
  }

  export type FoundDeclarationSumAggregateOutputType = {
    id: number | null
  }

  export type FoundDeclarationMinAggregateOutputType = {
    id: number | null
    image: string | null
    animal: typeAnimal | null
    race: string | null
    description: string | null
    dateFound: string | null
    placeFound: string | null
    phoneNumber: string | null
  }

  export type FoundDeclarationMaxAggregateOutputType = {
    id: number | null
    image: string | null
    animal: typeAnimal | null
    race: string | null
    description: string | null
    dateFound: string | null
    placeFound: string | null
    phoneNumber: string | null
  }

  export type FoundDeclarationCountAggregateOutputType = {
    id: number
    image: number
    animal: number
    race: number
    description: number
    dateFound: number
    placeFound: number
    phoneNumber: number
    _all: number
  }


  export type FoundDeclarationAvgAggregateInputType = {
    id?: true
  }

  export type FoundDeclarationSumAggregateInputType = {
    id?: true
  }

  export type FoundDeclarationMinAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateFound?: true
    placeFound?: true
    phoneNumber?: true
  }

  export type FoundDeclarationMaxAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateFound?: true
    placeFound?: true
    phoneNumber?: true
  }

  export type FoundDeclarationCountAggregateInputType = {
    id?: true
    image?: true
    animal?: true
    race?: true
    description?: true
    dateFound?: true
    placeFound?: true
    phoneNumber?: true
    _all?: true
  }

  export type FoundDeclarationAggregateArgs = {
    /**
     * Filter which FoundDeclaration to aggregate.
     */
    where?: FoundDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoundDeclarations to fetch.
     */
    orderBy?: Enumerable<FoundDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoundDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoundDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoundDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoundDeclarations
    **/
    _count?: true | FoundDeclarationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoundDeclarationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoundDeclarationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoundDeclarationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoundDeclarationMaxAggregateInputType
  }

  export type GetFoundDeclarationAggregateType<T extends FoundDeclarationAggregateArgs> = {
        [P in keyof T & keyof AggregateFoundDeclaration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoundDeclaration[P]>
      : GetScalarType<T[P], AggregateFoundDeclaration[P]>
  }




  export type FoundDeclarationGroupByArgs = {
    where?: FoundDeclarationWhereInput
    orderBy?: Enumerable<FoundDeclarationOrderByWithAggregationInput>
    by: FoundDeclarationScalarFieldEnum[]
    having?: FoundDeclarationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoundDeclarationCountAggregateInputType | true
    _avg?: FoundDeclarationAvgAggregateInputType
    _sum?: FoundDeclarationSumAggregateInputType
    _min?: FoundDeclarationMinAggregateInputType
    _max?: FoundDeclarationMaxAggregateInputType
  }


  export type FoundDeclarationGroupByOutputType = {
    id: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateFound: string
    placeFound: string
    phoneNumber: string
    _count: FoundDeclarationCountAggregateOutputType | null
    _avg: FoundDeclarationAvgAggregateOutputType | null
    _sum: FoundDeclarationSumAggregateOutputType | null
    _min: FoundDeclarationMinAggregateOutputType | null
    _max: FoundDeclarationMaxAggregateOutputType | null
  }

  type GetFoundDeclarationGroupByPayload<T extends FoundDeclarationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FoundDeclarationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoundDeclarationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoundDeclarationGroupByOutputType[P]>
            : GetScalarType<T[P], FoundDeclarationGroupByOutputType[P]>
        }
      >
    >


  export type FoundDeclarationSelect = {
    id?: boolean
    image?: boolean
    animal?: boolean
    race?: boolean
    description?: boolean
    dateFound?: boolean
    placeFound?: boolean
    phoneNumber?: boolean
  }


  export type FoundDeclarationGetPayload<S extends boolean | null | undefined | FoundDeclarationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FoundDeclaration :
    S extends undefined ? never :
    S extends { include: any } & (FoundDeclarationArgs | FoundDeclarationFindManyArgs)
    ? FoundDeclaration 
    : S extends { select: any } & (FoundDeclarationArgs | FoundDeclarationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FoundDeclaration ? FoundDeclaration[P] : never
  } 
      : FoundDeclaration


  type FoundDeclarationCountArgs = 
    Omit<FoundDeclarationFindManyArgs, 'select' | 'include'> & {
      select?: FoundDeclarationCountAggregateInputType | true
    }

  export interface FoundDeclarationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FoundDeclaration that matches the filter.
     * @param {FoundDeclarationFindUniqueArgs} args - Arguments to find a FoundDeclaration
     * @example
     * // Get one FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoundDeclarationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FoundDeclarationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FoundDeclaration'> extends True ? Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>> : Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T> | null, null>

    /**
     * Find one FoundDeclaration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FoundDeclarationFindUniqueOrThrowArgs} args - Arguments to find a FoundDeclaration
     * @example
     * // Get one FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoundDeclarationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FoundDeclarationFindUniqueOrThrowArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Find the first FoundDeclaration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationFindFirstArgs} args - Arguments to find a FoundDeclaration
     * @example
     * // Get one FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoundDeclarationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FoundDeclarationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FoundDeclaration'> extends True ? Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>> : Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T> | null, null>

    /**
     * Find the first FoundDeclaration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationFindFirstOrThrowArgs} args - Arguments to find a FoundDeclaration
     * @example
     * // Get one FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoundDeclarationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FoundDeclarationFindFirstOrThrowArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Find zero or more FoundDeclarations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoundDeclarations
     * const foundDeclarations = await prisma.foundDeclaration.findMany()
     * 
     * // Get first 10 FoundDeclarations
     * const foundDeclarations = await prisma.foundDeclaration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foundDeclarationWithIdOnly = await prisma.foundDeclaration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FoundDeclarationFindManyArgs>(
      args?: SelectSubset<T, FoundDeclarationFindManyArgs>
    ): Prisma.PrismaPromise<Array<FoundDeclarationGetPayload<T>>>

    /**
     * Create a FoundDeclaration.
     * @param {FoundDeclarationCreateArgs} args - Arguments to create a FoundDeclaration.
     * @example
     * // Create one FoundDeclaration
     * const FoundDeclaration = await prisma.foundDeclaration.create({
     *   data: {
     *     // ... data to create a FoundDeclaration
     *   }
     * })
     * 
    **/
    create<T extends FoundDeclarationCreateArgs>(
      args: SelectSubset<T, FoundDeclarationCreateArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Create many FoundDeclarations.
     *     @param {FoundDeclarationCreateManyArgs} args - Arguments to create many FoundDeclarations.
     *     @example
     *     // Create many FoundDeclarations
     *     const foundDeclaration = await prisma.foundDeclaration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FoundDeclarationCreateManyArgs>(
      args?: SelectSubset<T, FoundDeclarationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FoundDeclaration.
     * @param {FoundDeclarationDeleteArgs} args - Arguments to delete one FoundDeclaration.
     * @example
     * // Delete one FoundDeclaration
     * const FoundDeclaration = await prisma.foundDeclaration.delete({
     *   where: {
     *     // ... filter to delete one FoundDeclaration
     *   }
     * })
     * 
    **/
    delete<T extends FoundDeclarationDeleteArgs>(
      args: SelectSubset<T, FoundDeclarationDeleteArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Update one FoundDeclaration.
     * @param {FoundDeclarationUpdateArgs} args - Arguments to update one FoundDeclaration.
     * @example
     * // Update one FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoundDeclarationUpdateArgs>(
      args: SelectSubset<T, FoundDeclarationUpdateArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Delete zero or more FoundDeclarations.
     * @param {FoundDeclarationDeleteManyArgs} args - Arguments to filter FoundDeclarations to delete.
     * @example
     * // Delete a few FoundDeclarations
     * const { count } = await prisma.foundDeclaration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoundDeclarationDeleteManyArgs>(
      args?: SelectSubset<T, FoundDeclarationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoundDeclarations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoundDeclarations
     * const foundDeclaration = await prisma.foundDeclaration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoundDeclarationUpdateManyArgs>(
      args: SelectSubset<T, FoundDeclarationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FoundDeclaration.
     * @param {FoundDeclarationUpsertArgs} args - Arguments to update or create a FoundDeclaration.
     * @example
     * // Update or create a FoundDeclaration
     * const foundDeclaration = await prisma.foundDeclaration.upsert({
     *   create: {
     *     // ... data to create a FoundDeclaration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoundDeclaration we want to update
     *   }
     * })
    **/
    upsert<T extends FoundDeclarationUpsertArgs>(
      args: SelectSubset<T, FoundDeclarationUpsertArgs>
    ): Prisma__FoundDeclarationClient<FoundDeclarationGetPayload<T>>

    /**
     * Count the number of FoundDeclarations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationCountArgs} args - Arguments to filter FoundDeclarations to count.
     * @example
     * // Count the number of FoundDeclarations
     * const count = await prisma.foundDeclaration.count({
     *   where: {
     *     // ... the filter for the FoundDeclarations we want to count
     *   }
     * })
    **/
    count<T extends FoundDeclarationCountArgs>(
      args?: Subset<T, FoundDeclarationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoundDeclarationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoundDeclaration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoundDeclarationAggregateArgs>(args: Subset<T, FoundDeclarationAggregateArgs>): Prisma.PrismaPromise<GetFoundDeclarationAggregateType<T>>

    /**
     * Group by FoundDeclaration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoundDeclarationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoundDeclarationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoundDeclarationGroupByArgs['orderBy'] }
        : { orderBy?: FoundDeclarationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoundDeclarationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoundDeclarationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FoundDeclaration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FoundDeclarationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FoundDeclaration base type for findUnique actions
   */
  export type FoundDeclarationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter, which FoundDeclaration to fetch.
     */
    where: FoundDeclarationWhereUniqueInput
  }

  /**
   * FoundDeclaration findUnique
   */
  export interface FoundDeclarationFindUniqueArgs extends FoundDeclarationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoundDeclaration findUniqueOrThrow
   */
  export type FoundDeclarationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter, which FoundDeclaration to fetch.
     */
    where: FoundDeclarationWhereUniqueInput
  }


  /**
   * FoundDeclaration base type for findFirst actions
   */
  export type FoundDeclarationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter, which FoundDeclaration to fetch.
     */
    where?: FoundDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoundDeclarations to fetch.
     */
    orderBy?: Enumerable<FoundDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoundDeclarations.
     */
    cursor?: FoundDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoundDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoundDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoundDeclarations.
     */
    distinct?: Enumerable<FoundDeclarationScalarFieldEnum>
  }

  /**
   * FoundDeclaration findFirst
   */
  export interface FoundDeclarationFindFirstArgs extends FoundDeclarationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoundDeclaration findFirstOrThrow
   */
  export type FoundDeclarationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter, which FoundDeclaration to fetch.
     */
    where?: FoundDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoundDeclarations to fetch.
     */
    orderBy?: Enumerable<FoundDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoundDeclarations.
     */
    cursor?: FoundDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoundDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoundDeclarations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoundDeclarations.
     */
    distinct?: Enumerable<FoundDeclarationScalarFieldEnum>
  }


  /**
   * FoundDeclaration findMany
   */
  export type FoundDeclarationFindManyArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter, which FoundDeclarations to fetch.
     */
    where?: FoundDeclarationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoundDeclarations to fetch.
     */
    orderBy?: Enumerable<FoundDeclarationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoundDeclarations.
     */
    cursor?: FoundDeclarationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoundDeclarations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoundDeclarations.
     */
    skip?: number
    distinct?: Enumerable<FoundDeclarationScalarFieldEnum>
  }


  /**
   * FoundDeclaration create
   */
  export type FoundDeclarationCreateArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * The data needed to create a FoundDeclaration.
     */
    data: XOR<FoundDeclarationCreateInput, FoundDeclarationUncheckedCreateInput>
  }


  /**
   * FoundDeclaration createMany
   */
  export type FoundDeclarationCreateManyArgs = {
    /**
     * The data used to create many FoundDeclarations.
     */
    data: Enumerable<FoundDeclarationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FoundDeclaration update
   */
  export type FoundDeclarationUpdateArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * The data needed to update a FoundDeclaration.
     */
    data: XOR<FoundDeclarationUpdateInput, FoundDeclarationUncheckedUpdateInput>
    /**
     * Choose, which FoundDeclaration to update.
     */
    where: FoundDeclarationWhereUniqueInput
  }


  /**
   * FoundDeclaration updateMany
   */
  export type FoundDeclarationUpdateManyArgs = {
    /**
     * The data used to update FoundDeclarations.
     */
    data: XOR<FoundDeclarationUpdateManyMutationInput, FoundDeclarationUncheckedUpdateManyInput>
    /**
     * Filter which FoundDeclarations to update
     */
    where?: FoundDeclarationWhereInput
  }


  /**
   * FoundDeclaration upsert
   */
  export type FoundDeclarationUpsertArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * The filter to search for the FoundDeclaration to update in case it exists.
     */
    where: FoundDeclarationWhereUniqueInput
    /**
     * In case the FoundDeclaration found by the `where` argument doesn't exist, create a new FoundDeclaration with this data.
     */
    create: XOR<FoundDeclarationCreateInput, FoundDeclarationUncheckedCreateInput>
    /**
     * In case the FoundDeclaration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoundDeclarationUpdateInput, FoundDeclarationUncheckedUpdateInput>
  }


  /**
   * FoundDeclaration delete
   */
  export type FoundDeclarationDeleteArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
    /**
     * Filter which FoundDeclaration to delete.
     */
    where: FoundDeclarationWhereUniqueInput
  }


  /**
   * FoundDeclaration deleteMany
   */
  export type FoundDeclarationDeleteManyArgs = {
    /**
     * Filter which FoundDeclarations to delete
     */
    where?: FoundDeclarationWhereInput
  }


  /**
   * FoundDeclaration without action
   */
  export type FoundDeclarationArgs = {
    /**
     * Select specific fields to fetch from the FoundDeclaration
     */
    select?: FoundDeclarationSelect | null
  }



  /**
   * Model comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    stars: number | null
    userId: number | null
    announcementId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    stars: number | null
    userId: number | null
    announcementId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    message: string | null
    createdAt: string | null
    stars: number | null
    userId: number | null
    announcementId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    message: string | null
    createdAt: string | null
    stars: number | null
    userId: number | null
    announcementId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    message: number
    createdAt: number
    stars: number
    userId: number
    announcementId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    stars?: true
    userId?: true
    announcementId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    stars?: true
    userId?: true
    announcementId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    message?: true
    createdAt?: true
    stars?: true
    userId?: true
    announcementId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    message?: true
    createdAt?: true
    stars?: true
    userId?: true
    announcementId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    message?: true
    createdAt?: true
    stars?: true
    userId?: true
    announcementId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which comment to aggregate.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithAggregationInput>
    by: CommentScalarFieldEnum[]
    having?: commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    userId: number
    announcementId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type commentSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    message?: boolean
    createdAt?: boolean
    stars?: boolean
    userId?: boolean
    announcementId?: boolean
    user?: boolean | UserArgs
    announcement?: boolean | AnnouncementArgs
  }


  export type commentInclude = {
    user?: boolean | UserArgs
    announcement?: boolean | AnnouncementArgs
  }

  export type commentGetPayload<S extends boolean | null | undefined | commentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? comment :
    S extends undefined ? never :
    S extends { include: any } & (commentArgs | commentFindManyArgs)
    ? comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'announcement' ? AnnouncementGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (commentArgs | commentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'announcement' ? AnnouncementGetPayload<S['select'][P]> :  P extends keyof comment ? comment[P] : never
  } 
      : comment


  type commentCountArgs = 
    Omit<commentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface commentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comment that matches the filter.
     * @param {commentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comment'> extends True ? Prisma__commentClient<commentGetPayload<T>> : Prisma__commentClient<commentGetPayload<T> | null, null>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, commentFindUniqueOrThrowArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comment'> extends True ? Prisma__commentClient<commentGetPayload<T>> : Prisma__commentClient<commentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, commentFindFirstOrThrowArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentFindManyArgs>(
      args?: SelectSubset<T, commentFindManyArgs>
    ): Prisma.PrismaPromise<Array<commentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {commentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends commentCreateArgs>(
      args: SelectSubset<T, commentCreateArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {commentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentCreateManyArgs>(
      args?: SelectSubset<T, commentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {commentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends commentDeleteArgs>(
      args: SelectSubset<T, commentDeleteArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {commentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentUpdateArgs>(
      args: SelectSubset<T, commentUpdateArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {commentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentDeleteManyArgs>(
      args?: SelectSubset<T, commentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentUpdateManyArgs>(
      args: SelectSubset<T, commentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {commentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends commentUpsertArgs>(
      args: SelectSubset<T, commentUpsertArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentCountArgs>(
      args?: Subset<T, commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    announcement<T extends AnnouncementArgs= {}>(args?: Subset<T, AnnouncementArgs>): Prisma__AnnouncementClient<AnnouncementGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * comment base type for findUnique actions
   */
  export type commentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findUnique
   */
  export interface commentFindUniqueArgs extends commentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment findUniqueOrThrow
   */
  export type commentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment base type for findFirst actions
   */
  export type commentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * comment findFirst
   */
  export interface commentFindFirstArgs extends commentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment findFirstOrThrow
   */
  export type commentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * comment findMany
   */
  export type commentFindManyArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * comment create
   */
  export type commentCreateArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The data needed to create a comment.
     */
    data: XOR<commentCreateInput, commentUncheckedCreateInput>
  }


  /**
   * comment createMany
   */
  export type commentCreateManyArgs = {
    /**
     * The data used to create many comments.
     */
    data: Enumerable<commentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * comment update
   */
  export type commentUpdateArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The data needed to update a comment.
     */
    data: XOR<commentUpdateInput, commentUncheckedUpdateInput>
    /**
     * Choose, which comment to update.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment updateMany
   */
  export type commentUpdateManyArgs = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentWhereInput
  }


  /**
   * comment upsert
   */
  export type commentUpsertArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The filter to search for the comment to update in case it exists.
     */
    where: commentWhereUniqueInput
    /**
     * In case the comment found by the `where` argument doesn't exist, create a new comment with this data.
     */
    create: XOR<commentCreateInput, commentUncheckedCreateInput>
    /**
     * In case the comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentUpdateInput, commentUncheckedUpdateInput>
  }


  /**
   * comment delete
   */
  export type commentDeleteArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter which comment to delete.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment deleteMany
   */
  export type commentDeleteManyArgs = {
    /**
     * Filter which comments to delete
     */
    where?: commentWhereInput
  }


  /**
   * comment without action
   */
  export type commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    content: string | null
    createdAt: string | null
    image: string | null
    userId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    content: string | null
    createdAt: string | null
    image: string | null
    userId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    content: number
    createdAt: number
    image: number
    userId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    content?: true
    createdAt?: true
    image?: true
    userId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    content?: true
    createdAt?: true
    image?: true
    userId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    content?: true
    createdAt?: true
    image?: true
    userId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: PostScalarFieldEnum[]
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    userId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    content?: boolean
    createdAt?: boolean
    image?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    Response?: boolean | Post$ResponseArgs
    _count?: boolean | PostCountOutputTypeArgs
  }


  export type PostInclude = {
    user?: boolean | UserArgs
    Response?: boolean | Post$ResponseArgs
    _count?: boolean | PostCountOutputTypeArgs
  }

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'Response' ? Array < ResponseGetPayload<S['include'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'Response' ? Array < ResponseGetPayload<S['select'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Response<T extends Post$ResponseArgs= {}>(args?: Subset<T, Post$ResponseArgs>): Prisma.PrismaPromise<Array<ResponseGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }


  /**
   * Post.Response
   */
  export type Post$ResponseArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    where?: ResponseWhereInput
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    cursor?: ResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
  }



  /**
   * Model Response
   */


  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    postId: number | null
  }

  export type ResponseSumAggregateOutputType = {
    id: number | null
    userId: number | null
    postId: number | null
  }

  export type ResponseMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    response: string | null
    image: string | null
    createdAt: string | null
    userId: number | null
    postId: number | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    response: string | null
    image: string | null
    createdAt: string | null
    userId: number | null
    postId: number | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    response: number
    image: number
    createdAt: number
    userId: number
    postId: number
    _all: number
  }


  export type ResponseAvgAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
  }

  export type ResponseSumAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
  }

  export type ResponseMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    response?: true
    image?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    response?: true
    image?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    response?: true
    image?: true
    createdAt?: true
    userId?: true
    postId?: true
    _all?: true
  }

  export type ResponseAggregateArgs = {
    /**
     * Filter which Response to aggregate.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type ResponseGroupByArgs = {
    where?: ResponseWhereInput
    orderBy?: Enumerable<ResponseOrderByWithAggregationInput>
    by: ResponseScalarFieldEnum[]
    having?: ResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _avg?: ResponseAvgAggregateInputType
    _sum?: ResponseSumAggregateInputType
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }


  export type ResponseGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    userId: number
    postId: number
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends ResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type ResponseSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    response?: boolean
    image?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserArgs
    post?: boolean | PostArgs
  }


  export type ResponseInclude = {
    user?: boolean | UserArgs
    post?: boolean | PostArgs
  }

  export type ResponseGetPayload<S extends boolean | null | undefined | ResponseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Response :
    S extends undefined ? never :
    S extends { include: any } & (ResponseArgs | ResponseFindManyArgs)
    ? Response  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'post' ? PostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ResponseArgs | ResponseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'post' ? PostGetPayload<S['select'][P]> :  P extends keyof Response ? Response[P] : never
  } 
      : Response


  type ResponseCountArgs = 
    Omit<ResponseFindManyArgs, 'select' | 'include'> & {
      select?: ResponseCountAggregateInputType | true
    }

  export interface ResponseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Response that matches the filter.
     * @param {ResponseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResponseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResponseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Response'> extends True ? Prisma__ResponseClient<ResponseGetPayload<T>> : Prisma__ResponseClient<ResponseGetPayload<T> | null, null>

    /**
     * Find one Response that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResponseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResponseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindUniqueOrThrowArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResponseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResponseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Response'> extends True ? Prisma__ResponseClient<ResponseGetPayload<T>> : Prisma__ResponseClient<ResponseGetPayload<T> | null, null>

    /**
     * Find the first Response that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResponseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindFirstOrThrowArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResponseFindManyArgs>(
      args?: SelectSubset<T, ResponseFindManyArgs>
    ): Prisma.PrismaPromise<Array<ResponseGetPayload<T>>>

    /**
     * Create a Response.
     * @param {ResponseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
    **/
    create<T extends ResponseCreateArgs>(
      args: SelectSubset<T, ResponseCreateArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Create many Responses.
     *     @param {ResponseCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const response = await prisma.response.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResponseCreateManyArgs>(
      args?: SelectSubset<T, ResponseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Response.
     * @param {ResponseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
    **/
    delete<T extends ResponseDeleteArgs>(
      args: SelectSubset<T, ResponseDeleteArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Update one Response.
     * @param {ResponseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResponseUpdateArgs>(
      args: SelectSubset<T, ResponseUpdateArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Delete zero or more Responses.
     * @param {ResponseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResponseDeleteManyArgs>(
      args?: SelectSubset<T, ResponseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResponseUpdateManyArgs>(
      args: SelectSubset<T, ResponseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {ResponseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
    **/
    upsert<T extends ResponseUpsertArgs>(
      args: SelectSubset<T, ResponseUpsertArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends ResponseCountArgs>(
      args?: Subset<T, ResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): Prisma.PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseGroupByArgs['orderBy'] }
        : { orderBy?: ResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResponseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Response base type for findUnique actions
   */
  export type ResponseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }

  /**
   * Response findUnique
   */
  export interface ResponseFindUniqueArgs extends ResponseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response findUniqueOrThrow
   */
  export type ResponseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response base type for findFirst actions
   */
  export type ResponseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }

  /**
   * Response findFirst
   */
  export interface ResponseFindFirstArgs extends ResponseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response findFirstOrThrow
   */
  export type ResponseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * Response findMany
   */
  export type ResponseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter, which Responses to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * Response create
   */
  export type ResponseCreateArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * The data needed to create a Response.
     */
    data: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
  }


  /**
   * Response createMany
   */
  export type ResponseCreateManyArgs = {
    /**
     * The data used to create many Responses.
     */
    data: Enumerable<ResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Response update
   */
  export type ResponseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * The data needed to update a Response.
     */
    data: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
    /**
     * Choose, which Response to update.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response updateMany
   */
  export type ResponseUpdateManyArgs = {
    /**
     * The data used to update Responses.
     */
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyInput>
    /**
     * Filter which Responses to update
     */
    where?: ResponseWhereInput
  }


  /**
   * Response upsert
   */
  export type ResponseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * The filter to search for the Response to update in case it exists.
     */
    where: ResponseWhereUniqueInput
    /**
     * In case the Response found by the `where` argument doesn't exist, create a new Response with this data.
     */
    create: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
    /**
     * In case the Response was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
  }


  /**
   * Response delete
   */
  export type ResponseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
    /**
     * Filter which Response to delete.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response deleteMany
   */
  export type ResponseDeleteManyArgs = {
    /**
     * Filter which Responses to delete
     */
    where?: ResponseWhereInput
  }


  /**
   * Response without action
   */
  export type ResponseArgs = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnimalScalarFieldEnum: {
    id: 'id',
    species: 'species',
    race: 'race',
    dateOfBirth: 'dateOfBirth',
    name: 'name',
    description: 'description',
    age: 'age',
    isVaccinated: 'isVaccinated',
    isEducated: 'isEducated',
    gender: 'gender',
    status: 'status',
    price: 'price',
    image: 'image',
    userId: 'userId'
  };

  export type AnimalScalarFieldEnum = (typeof AnimalScalarFieldEnum)[keyof typeof AnimalScalarFieldEnum]


  export const AnnouncementScalarFieldEnum: {
    id: 'id',
    type: 'type',
    firstName: 'firstName',
    lastName: 'lastName',
    contact: 'contact',
    ville: 'ville',
    experience: 'experience',
    level: 'level',
    image: 'image',
    description: 'description',
    city: 'city',
    userId: 'userId'
  };

  export type AnnouncementScalarFieldEnum = (typeof AnnouncementScalarFieldEnum)[keyof typeof AnnouncementScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    message: 'message',
    createdAt: 'createdAt',
    stars: 'stars',
    userId: 'userId',
    announcementId: 'announcementId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const FoundDeclarationScalarFieldEnum: {
    id: 'id',
    image: 'image',
    animal: 'animal',
    race: 'race',
    description: 'description',
    dateFound: 'dateFound',
    placeFound: 'placeFound',
    phoneNumber: 'phoneNumber'
  };

  export type FoundDeclarationScalarFieldEnum = (typeof FoundDeclarationScalarFieldEnum)[keyof typeof FoundDeclarationScalarFieldEnum]


  export const LostDeclarationScalarFieldEnum: {
    id: 'id',
    image: 'image',
    animal: 'animal',
    race: 'race',
    description: 'description',
    dateLost: 'dateLost',
    placeLost: 'placeLost',
    phoneNumber: 'phoneNumber',
    withReward: 'withReward'
  };

  export type LostDeclarationScalarFieldEnum = (typeof LostDeclarationScalarFieldEnum)[keyof typeof LostDeclarationScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    content: 'content',
    createdAt: 'createdAt',
    image: 'image',
    userId: 'userId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    category: 'category',
    brandProduct: 'brandProduct',
    description: 'description',
    animalCible: 'animalCible',
    image: 'image',
    price: 'price',
    isDispo: 'isDispo',
    userId: 'userId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    response: 'response',
    image: 'image',
    createdAt: 'createdAt',
    userId: 'userId',
    postId: 'postId'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    photo: 'photo',
    password: 'password',
    phoneNumber: 'phoneNumber',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    photo?: StringFilter | string
    password?: StringFilter | string
    phoneNumber?: StringFilter | string
    role?: EnumRoleFilter | Role
    createdAt?: StringFilter | string
    updatedAt?: StringFilter | string
    Product?: ProductListRelationFilter
    announcement?: AnnouncementListRelationFilter
    Animal?: AnimalListRelationFilter
    comment?: CommentListRelationFilter
    Post?: PostListRelationFilter
    Response?: ResponseListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Product?: ProductOrderByRelationAggregateInput
    announcement?: AnnouncementOrderByRelationAggregateInput
    Animal?: AnimalOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
    Post?: PostOrderByRelationAggregateInput
    Response?: ResponseOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    photo?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    createdAt?: StringWithAggregatesFilter | string
    updatedAt?: StringWithAggregatesFilter | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    category?: EnumCategoryFilter | Category
    brandProduct?: StringFilter | string
    description?: StringFilter | string
    animalCible?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    isDispo?: BoolFilter | boolean
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    brandProduct?: SortOrder
    description?: SortOrder
    animalCible?: SortOrder
    image?: SortOrder
    price?: SortOrder
    isDispo?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = {
    id?: number
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    brandProduct?: SortOrder
    description?: SortOrder
    animalCible?: SortOrder
    image?: SortOrder
    price?: SortOrder
    isDispo?: SortOrder
    userId?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    category?: EnumCategoryWithAggregatesFilter | Category
    brandProduct?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    animalCible?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    isDispo?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
  }

  export type AnnouncementWhereInput = {
    AND?: Enumerable<AnnouncementWhereInput>
    OR?: Enumerable<AnnouncementWhereInput>
    NOT?: Enumerable<AnnouncementWhereInput>
    id?: IntFilter | number
    type?: EnumServiceFilter | Service
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    contact?: StringFilter | string
    ville?: StringFilter | string
    experience?: IntFilter | number
    level?: EnumLevelFilter | Level
    image?: StringFilter | string
    description?: StringFilter | string
    city?: StringFilter | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment?: CommentListRelationFilter
  }

  export type AnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contact?: SortOrder
    ville?: SortOrder
    experience?: SortOrder
    level?: SortOrder
    image?: SortOrder
    description?: SortOrder
    city?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    comment?: commentOrderByRelationAggregateInput
  }

  export type AnnouncementWhereUniqueInput = {
    id?: number
  }

  export type AnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contact?: SortOrder
    ville?: SortOrder
    experience?: SortOrder
    level?: SortOrder
    image?: SortOrder
    description?: SortOrder
    city?: SortOrder
    userId?: SortOrder
    _count?: AnnouncementCountOrderByAggregateInput
    _avg?: AnnouncementAvgOrderByAggregateInput
    _max?: AnnouncementMaxOrderByAggregateInput
    _min?: AnnouncementMinOrderByAggregateInput
    _sum?: AnnouncementSumOrderByAggregateInput
  }

  export type AnnouncementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnnouncementScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnnouncementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnnouncementScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: EnumServiceWithAggregatesFilter | Service
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    contact?: StringWithAggregatesFilter | string
    ville?: StringWithAggregatesFilter | string
    experience?: IntWithAggregatesFilter | number
    level?: EnumLevelWithAggregatesFilter | Level
    image?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type AnimalWhereInput = {
    AND?: Enumerable<AnimalWhereInput>
    OR?: Enumerable<AnimalWhereInput>
    NOT?: Enumerable<AnimalWhereInput>
    id?: IntFilter | number
    species?: StringFilter | string
    race?: StringFilter | string
    dateOfBirth?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    age?: FloatFilter | number
    isVaccinated?: BoolFilter | boolean
    isEducated?: BoolFilter | boolean
    gender?: EnumgenderFilter | gender
    status?: EnumstatusFilter | status
    price?: FloatFilter | number
    image?: StringFilter | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AnimalOrderByWithRelationInput = {
    id?: SortOrder
    species?: SortOrder
    race?: SortOrder
    dateOfBirth?: SortOrder
    name?: SortOrder
    description?: SortOrder
    age?: SortOrder
    isVaccinated?: SortOrder
    isEducated?: SortOrder
    gender?: SortOrder
    status?: SortOrder
    price?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AnimalWhereUniqueInput = {
    id?: number
  }

  export type AnimalOrderByWithAggregationInput = {
    id?: SortOrder
    species?: SortOrder
    race?: SortOrder
    dateOfBirth?: SortOrder
    name?: SortOrder
    description?: SortOrder
    age?: SortOrder
    isVaccinated?: SortOrder
    isEducated?: SortOrder
    gender?: SortOrder
    status?: SortOrder
    price?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    _count?: AnimalCountOrderByAggregateInput
    _avg?: AnimalAvgOrderByAggregateInput
    _max?: AnimalMaxOrderByAggregateInput
    _min?: AnimalMinOrderByAggregateInput
    _sum?: AnimalSumOrderByAggregateInput
  }

  export type AnimalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnimalScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnimalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnimalScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    species?: StringWithAggregatesFilter | string
    race?: StringWithAggregatesFilter | string
    dateOfBirth?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    age?: FloatWithAggregatesFilter | number
    isVaccinated?: BoolWithAggregatesFilter | boolean
    isEducated?: BoolWithAggregatesFilter | boolean
    gender?: EnumgenderWithAggregatesFilter | gender
    status?: EnumstatusWithAggregatesFilter | status
    price?: FloatWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type LostDeclarationWhereInput = {
    AND?: Enumerable<LostDeclarationWhereInput>
    OR?: Enumerable<LostDeclarationWhereInput>
    NOT?: Enumerable<LostDeclarationWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    animal?: EnumtypeAnimalFilter | typeAnimal
    race?: StringFilter | string
    description?: StringFilter | string
    dateLost?: StringFilter | string
    placeLost?: StringFilter | string
    phoneNumber?: StringFilter | string
    withReward?: BoolFilter | boolean
  }

  export type LostDeclarationOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateLost?: SortOrder
    placeLost?: SortOrder
    phoneNumber?: SortOrder
    withReward?: SortOrder
  }

  export type LostDeclarationWhereUniqueInput = {
    id?: number
  }

  export type LostDeclarationOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateLost?: SortOrder
    placeLost?: SortOrder
    phoneNumber?: SortOrder
    withReward?: SortOrder
    _count?: LostDeclarationCountOrderByAggregateInput
    _avg?: LostDeclarationAvgOrderByAggregateInput
    _max?: LostDeclarationMaxOrderByAggregateInput
    _min?: LostDeclarationMinOrderByAggregateInput
    _sum?: LostDeclarationSumOrderByAggregateInput
  }

  export type LostDeclarationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LostDeclarationScalarWhereWithAggregatesInput>
    OR?: Enumerable<LostDeclarationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LostDeclarationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    animal?: EnumtypeAnimalWithAggregatesFilter | typeAnimal
    race?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    dateLost?: StringWithAggregatesFilter | string
    placeLost?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    withReward?: BoolWithAggregatesFilter | boolean
  }

  export type FoundDeclarationWhereInput = {
    AND?: Enumerable<FoundDeclarationWhereInput>
    OR?: Enumerable<FoundDeclarationWhereInput>
    NOT?: Enumerable<FoundDeclarationWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    animal?: EnumtypeAnimalFilter | typeAnimal
    race?: StringFilter | string
    description?: StringFilter | string
    dateFound?: StringFilter | string
    placeFound?: StringFilter | string
    phoneNumber?: StringFilter | string
  }

  export type FoundDeclarationOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateFound?: SortOrder
    placeFound?: SortOrder
    phoneNumber?: SortOrder
  }

  export type FoundDeclarationWhereUniqueInput = {
    id?: number
  }

  export type FoundDeclarationOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateFound?: SortOrder
    placeFound?: SortOrder
    phoneNumber?: SortOrder
    _count?: FoundDeclarationCountOrderByAggregateInput
    _avg?: FoundDeclarationAvgOrderByAggregateInput
    _max?: FoundDeclarationMaxOrderByAggregateInput
    _min?: FoundDeclarationMinOrderByAggregateInput
    _sum?: FoundDeclarationSumOrderByAggregateInput
  }

  export type FoundDeclarationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FoundDeclarationScalarWhereWithAggregatesInput>
    OR?: Enumerable<FoundDeclarationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FoundDeclarationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    animal?: EnumtypeAnimalWithAggregatesFilter | typeAnimal
    race?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    dateFound?: StringWithAggregatesFilter | string
    placeFound?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
  }

  export type commentWhereInput = {
    AND?: Enumerable<commentWhereInput>
    OR?: Enumerable<commentWhereInput>
    NOT?: Enumerable<commentWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    message?: StringFilter | string
    createdAt?: StringFilter | string
    stars?: IntFilter | number
    userId?: IntFilter | number
    announcementId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    announcement?: XOR<AnnouncementRelationFilter, AnnouncementWhereInput>
  }

  export type commentOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
    user?: UserOrderByWithRelationInput
    announcement?: AnnouncementOrderByWithRelationInput
  }

  export type commentWhereUniqueInput = {
    id?: number
  }

  export type commentOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
    _count?: commentCountOrderByAggregateInput
    _avg?: commentAvgOrderByAggregateInput
    _max?: commentMaxOrderByAggregateInput
    _min?: commentMinOrderByAggregateInput
    _sum?: commentSumOrderByAggregateInput
  }

  export type commentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    createdAt?: StringWithAggregatesFilter | string
    stars?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    announcementId?: IntWithAggregatesFilter | number
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    content?: StringFilter | string
    createdAt?: StringFilter | string
    image?: StringFilter | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    Response?: ResponseListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    Response?: ResponseOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    createdAt?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type ResponseWhereInput = {
    AND?: Enumerable<ResponseWhereInput>
    OR?: Enumerable<ResponseWhereInput>
    NOT?: Enumerable<ResponseWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    response?: StringFilter | string
    image?: StringFilter | string
    createdAt?: StringFilter | string
    userId?: IntFilter | number
    postId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type ResponseOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    response?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type ResponseWhereUniqueInput = {
    id?: number
  }

  export type ResponseOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    response?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    _count?: ResponseCountOrderByAggregateInput
    _avg?: ResponseAvgOrderByAggregateInput
    _max?: ResponseMaxOrderByAggregateInput
    _min?: ResponseMinOrderByAggregateInput
    _sum?: ResponseSumOrderByAggregateInput
  }

  export type ResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    response?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    createdAt?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
    user: UserCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
    userId: number
  }

  export type ProductUpdateInput = {
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateManyInput = {
    id?: number
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
    userId: number
  }

  export type ProductUpdateManyMutationInput = {
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AnnouncementCreateInput = {
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    user: UserCreateNestedOneWithoutAnnouncementInput
    comment?: commentCreateNestedManyWithoutAnnouncementInput
  }

  export type AnnouncementUncheckedCreateInput = {
    id?: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    userId: number
    comment?: commentUncheckedCreateNestedManyWithoutAnnouncementInput
  }

  export type AnnouncementUpdateInput = {
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAnnouncementNestedInput
    comment?: commentUpdateManyWithoutAnnouncementNestedInput
  }

  export type AnnouncementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    comment?: commentUncheckedUpdateManyWithoutAnnouncementNestedInput
  }

  export type AnnouncementCreateManyInput = {
    id?: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    userId: number
  }

  export type AnnouncementUpdateManyMutationInput = {
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type AnnouncementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimalCreateInput = {
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
    user: UserCreateNestedOneWithoutAnimalInput
  }

  export type AnimalUncheckedCreateInput = {
    id?: number
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
    userId: number
  }

  export type AnimalUpdateInput = {
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAnimalNestedInput
  }

  export type AnimalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimalCreateManyInput = {
    id?: number
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
    userId: number
  }

  export type AnimalUpdateManyMutationInput = {
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AnimalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type LostDeclarationCreateInput = {
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateLost: string
    placeLost: string
    phoneNumber: string
    withReward: boolean
  }

  export type LostDeclarationUncheckedCreateInput = {
    id?: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateLost: string
    placeLost: string
    phoneNumber: string
    withReward: boolean
  }

  export type LostDeclarationUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateLost?: StringFieldUpdateOperationsInput | string
    placeLost?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    withReward?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LostDeclarationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateLost?: StringFieldUpdateOperationsInput | string
    placeLost?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    withReward?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LostDeclarationCreateManyInput = {
    id?: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateLost: string
    placeLost: string
    phoneNumber: string
    withReward: boolean
  }

  export type LostDeclarationUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateLost?: StringFieldUpdateOperationsInput | string
    placeLost?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    withReward?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LostDeclarationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateLost?: StringFieldUpdateOperationsInput | string
    placeLost?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    withReward?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FoundDeclarationCreateInput = {
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateFound: string
    placeFound: string
    phoneNumber: string
  }

  export type FoundDeclarationUncheckedCreateInput = {
    id?: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateFound: string
    placeFound: string
    phoneNumber: string
  }

  export type FoundDeclarationUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateFound?: StringFieldUpdateOperationsInput | string
    placeFound?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type FoundDeclarationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateFound?: StringFieldUpdateOperationsInput | string
    placeFound?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type FoundDeclarationCreateManyInput = {
    id?: number
    image: string
    animal: typeAnimal
    race: string
    description: string
    dateFound: string
    placeFound: string
    phoneNumber: string
  }

  export type FoundDeclarationUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateFound?: StringFieldUpdateOperationsInput | string
    placeFound?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type FoundDeclarationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    animal?: EnumtypeAnimalFieldUpdateOperationsInput | typeAnimal
    race?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dateFound?: StringFieldUpdateOperationsInput | string
    placeFound?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type commentCreateInput = {
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    user: UserCreateNestedOneWithoutCommentInput
    announcement: AnnouncementCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    userId: number
    announcementId: number
  }

  export type commentUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    announcement?: AnnouncementUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    announcementId?: IntFieldUpdateOperationsInput | number
  }

  export type commentCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    userId: number
    announcementId: number
  }

  export type commentUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type commentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    announcementId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    user: UserCreateNestedOneWithoutPostInput
    Response?: ResponseCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    userId: number
    Response?: ResponseUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    Response?: ResponseUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    Response?: ResponseUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    userId: number
  }

  export type PostUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ResponseCreateInput = {
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    user: UserCreateNestedOneWithoutResponseInput
    post: PostCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    userId: number
    postId: number
  }

  export type ResponseUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutResponseNestedInput
    post?: PostUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ResponseCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    userId: number
    postId: number
  }

  export type ResponseUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type AnnouncementListRelationFilter = {
    every?: AnnouncementWhereInput
    some?: AnnouncementWhereInput
    none?: AnnouncementWhereInput
  }

  export type AnimalListRelationFilter = {
    every?: AnimalWhereInput
    some?: AnimalWhereInput
    none?: AnimalWhereInput
  }

  export type CommentListRelationFilter = {
    every?: commentWhereInput
    some?: commentWhereInput
    none?: commentWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: ResponseWhereInput
    some?: ResponseWhereInput
    none?: ResponseWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type EnumCategoryFilter = {
    equals?: Category
    in?: Enumerable<Category>
    notIn?: Enumerable<Category>
    not?: NestedEnumCategoryFilter | Category
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    brandProduct?: SortOrder
    description?: SortOrder
    animalCible?: SortOrder
    image?: SortOrder
    price?: SortOrder
    isDispo?: SortOrder
    userId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    brandProduct?: SortOrder
    description?: SortOrder
    animalCible?: SortOrder
    image?: SortOrder
    price?: SortOrder
    isDispo?: SortOrder
    userId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    brandProduct?: SortOrder
    description?: SortOrder
    animalCible?: SortOrder
    image?: SortOrder
    price?: SortOrder
    isDispo?: SortOrder
    userId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type EnumCategoryWithAggregatesFilter = {
    equals?: Category
    in?: Enumerable<Category>
    notIn?: Enumerable<Category>
    not?: NestedEnumCategoryWithAggregatesFilter | Category
    _count?: NestedIntFilter
    _min?: NestedEnumCategoryFilter
    _max?: NestedEnumCategoryFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumServiceFilter = {
    equals?: Service
    in?: Enumerable<Service>
    notIn?: Enumerable<Service>
    not?: NestedEnumServiceFilter | Service
  }

  export type EnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type AnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contact?: SortOrder
    ville?: SortOrder
    experience?: SortOrder
    level?: SortOrder
    image?: SortOrder
    description?: SortOrder
    city?: SortOrder
    userId?: SortOrder
  }

  export type AnnouncementAvgOrderByAggregateInput = {
    id?: SortOrder
    experience?: SortOrder
    userId?: SortOrder
  }

  export type AnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contact?: SortOrder
    ville?: SortOrder
    experience?: SortOrder
    level?: SortOrder
    image?: SortOrder
    description?: SortOrder
    city?: SortOrder
    userId?: SortOrder
  }

  export type AnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contact?: SortOrder
    ville?: SortOrder
    experience?: SortOrder
    level?: SortOrder
    image?: SortOrder
    description?: SortOrder
    city?: SortOrder
    userId?: SortOrder
  }

  export type AnnouncementSumOrderByAggregateInput = {
    id?: SortOrder
    experience?: SortOrder
    userId?: SortOrder
  }

  export type EnumServiceWithAggregatesFilter = {
    equals?: Service
    in?: Enumerable<Service>
    notIn?: Enumerable<Service>
    not?: NestedEnumServiceWithAggregatesFilter | Service
    _count?: NestedIntFilter
    _min?: NestedEnumServiceFilter
    _max?: NestedEnumServiceFilter
  }

  export type EnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type EnumgenderFilter = {
    equals?: gender
    in?: Enumerable<gender>
    notIn?: Enumerable<gender>
    not?: NestedEnumgenderFilter | gender
  }

  export type EnumstatusFilter = {
    equals?: status
    in?: Enumerable<status>
    notIn?: Enumerable<status>
    not?: NestedEnumstatusFilter | status
  }

  export type AnimalCountOrderByAggregateInput = {
    id?: SortOrder
    species?: SortOrder
    race?: SortOrder
    dateOfBirth?: SortOrder
    name?: SortOrder
    description?: SortOrder
    age?: SortOrder
    isVaccinated?: SortOrder
    isEducated?: SortOrder
    gender?: SortOrder
    status?: SortOrder
    price?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type AnimalAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type AnimalMaxOrderByAggregateInput = {
    id?: SortOrder
    species?: SortOrder
    race?: SortOrder
    dateOfBirth?: SortOrder
    name?: SortOrder
    description?: SortOrder
    age?: SortOrder
    isVaccinated?: SortOrder
    isEducated?: SortOrder
    gender?: SortOrder
    status?: SortOrder
    price?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type AnimalMinOrderByAggregateInput = {
    id?: SortOrder
    species?: SortOrder
    race?: SortOrder
    dateOfBirth?: SortOrder
    name?: SortOrder
    description?: SortOrder
    age?: SortOrder
    isVaccinated?: SortOrder
    isEducated?: SortOrder
    gender?: SortOrder
    status?: SortOrder
    price?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type AnimalSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type EnumgenderWithAggregatesFilter = {
    equals?: gender
    in?: Enumerable<gender>
    notIn?: Enumerable<gender>
    not?: NestedEnumgenderWithAggregatesFilter | gender
    _count?: NestedIntFilter
    _min?: NestedEnumgenderFilter
    _max?: NestedEnumgenderFilter
  }

  export type EnumstatusWithAggregatesFilter = {
    equals?: status
    in?: Enumerable<status>
    notIn?: Enumerable<status>
    not?: NestedEnumstatusWithAggregatesFilter | status
    _count?: NestedIntFilter
    _min?: NestedEnumstatusFilter
    _max?: NestedEnumstatusFilter
  }

  export type EnumtypeAnimalFilter = {
    equals?: typeAnimal
    in?: Enumerable<typeAnimal>
    notIn?: Enumerable<typeAnimal>
    not?: NestedEnumtypeAnimalFilter | typeAnimal
  }

  export type LostDeclarationCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateLost?: SortOrder
    placeLost?: SortOrder
    phoneNumber?: SortOrder
    withReward?: SortOrder
  }

  export type LostDeclarationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LostDeclarationMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateLost?: SortOrder
    placeLost?: SortOrder
    phoneNumber?: SortOrder
    withReward?: SortOrder
  }

  export type LostDeclarationMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateLost?: SortOrder
    placeLost?: SortOrder
    phoneNumber?: SortOrder
    withReward?: SortOrder
  }

  export type LostDeclarationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumtypeAnimalWithAggregatesFilter = {
    equals?: typeAnimal
    in?: Enumerable<typeAnimal>
    notIn?: Enumerable<typeAnimal>
    not?: NestedEnumtypeAnimalWithAggregatesFilter | typeAnimal
    _count?: NestedIntFilter
    _min?: NestedEnumtypeAnimalFilter
    _max?: NestedEnumtypeAnimalFilter
  }

  export type FoundDeclarationCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateFound?: SortOrder
    placeFound?: SortOrder
    phoneNumber?: SortOrder
  }

  export type FoundDeclarationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FoundDeclarationMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateFound?: SortOrder
    placeFound?: SortOrder
    phoneNumber?: SortOrder
  }

  export type FoundDeclarationMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    animal?: SortOrder
    race?: SortOrder
    description?: SortOrder
    dateFound?: SortOrder
    placeFound?: SortOrder
    phoneNumber?: SortOrder
  }

  export type FoundDeclarationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnnouncementRelationFilter = {
    is?: AnnouncementWhereInput
    isNot?: AnnouncementWhereInput
  }

  export type commentCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
  }

  export type commentAvgOrderByAggregateInput = {
    id?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
  }

  export type commentMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
  }

  export type commentMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
  }

  export type commentSumOrderByAggregateInput = {
    id?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
    announcementId?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type ResponseCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    response?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type ResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type ResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    response?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type ResponseMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    response?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type ResponseSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type ProductCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProductCreateWithoutUserInput>, Enumerable<ProductUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutUserInput>
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type AnnouncementCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AnnouncementCreateWithoutUserInput>, Enumerable<AnnouncementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnnouncementCreateOrConnectWithoutUserInput>
    createMany?: AnnouncementCreateManyUserInputEnvelope
    connect?: Enumerable<AnnouncementWhereUniqueInput>
  }

  export type AnimalCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AnimalCreateWithoutUserInput>, Enumerable<AnimalUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnimalCreateOrConnectWithoutUserInput>
    createMany?: AnimalCreateManyUserInputEnvelope
    connect?: Enumerable<AnimalWhereUniqueInput>
  }

  export type commentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    createMany?: commentCreateManyUserInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type ProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProductCreateWithoutUserInput>, Enumerable<ProductUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutUserInput>
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AnnouncementCreateWithoutUserInput>, Enumerable<AnnouncementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnnouncementCreateOrConnectWithoutUserInput>
    createMany?: AnnouncementCreateManyUserInputEnvelope
    connect?: Enumerable<AnnouncementWhereUniqueInput>
  }

  export type AnimalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AnimalCreateWithoutUserInput>, Enumerable<AnimalUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnimalCreateOrConnectWithoutUserInput>
    createMany?: AnimalCreateManyUserInputEnvelope
    connect?: Enumerable<AnimalWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    createMany?: commentCreateManyUserInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type ProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutUserInput>, Enumerable<ProductUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProductCreateManyUserInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type AnnouncementUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AnnouncementCreateWithoutUserInput>, Enumerable<AnnouncementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnnouncementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AnnouncementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AnnouncementCreateManyUserInputEnvelope
    set?: Enumerable<AnnouncementWhereUniqueInput>
    disconnect?: Enumerable<AnnouncementWhereUniqueInput>
    delete?: Enumerable<AnnouncementWhereUniqueInput>
    connect?: Enumerable<AnnouncementWhereUniqueInput>
    update?: Enumerable<AnnouncementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AnnouncementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AnnouncementScalarWhereInput>
  }

  export type AnimalUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AnimalCreateWithoutUserInput>, Enumerable<AnimalUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnimalCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AnimalUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AnimalCreateManyUserInputEnvelope
    set?: Enumerable<AnimalWhereUniqueInput>
    disconnect?: Enumerable<AnimalWhereUniqueInput>
    delete?: Enumerable<AnimalWhereUniqueInput>
    connect?: Enumerable<AnimalWhereUniqueInput>
    update?: Enumerable<AnimalUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AnimalUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AnimalScalarWhereInput>
  }

  export type commentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: commentCreateManyUserInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ResponseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutUserInput>, Enumerable<ProductUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProductCreateManyUserInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type AnnouncementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AnnouncementCreateWithoutUserInput>, Enumerable<AnnouncementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnnouncementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AnnouncementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AnnouncementCreateManyUserInputEnvelope
    set?: Enumerable<AnnouncementWhereUniqueInput>
    disconnect?: Enumerable<AnnouncementWhereUniqueInput>
    delete?: Enumerable<AnnouncementWhereUniqueInput>
    connect?: Enumerable<AnnouncementWhereUniqueInput>
    update?: Enumerable<AnnouncementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AnnouncementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AnnouncementScalarWhereInput>
  }

  export type AnimalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AnimalCreateWithoutUserInput>, Enumerable<AnimalUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AnimalCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AnimalUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AnimalCreateManyUserInputEnvelope
    set?: Enumerable<AnimalWhereUniqueInput>
    disconnect?: Enumerable<AnimalWhereUniqueInput>
    delete?: Enumerable<AnimalWhereUniqueInput>
    connect?: Enumerable<AnimalWhereUniqueInput>
    update?: Enumerable<AnimalUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AnimalUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AnimalScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: commentCreateManyUserInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProductInput = {
    create?: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCategoryFieldUpdateOperationsInput = {
    set?: Category
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductInput
    upsert?: UserUpsertWithoutProductInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProductInput, UserUncheckedUpdateWithoutProductInput>
  }

  export type UserCreateNestedOneWithoutAnnouncementInput = {
    create?: XOR<UserCreateWithoutAnnouncementInput, UserUncheckedCreateWithoutAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnnouncementInput
    connect?: UserWhereUniqueInput
  }

  export type commentCreateNestedManyWithoutAnnouncementInput = {
    create?: XOR<Enumerable<commentCreateWithoutAnnouncementInput>, Enumerable<commentUncheckedCreateWithoutAnnouncementInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutAnnouncementInput>
    createMany?: commentCreateManyAnnouncementInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutAnnouncementInput = {
    create?: XOR<Enumerable<commentCreateWithoutAnnouncementInput>, Enumerable<commentUncheckedCreateWithoutAnnouncementInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutAnnouncementInput>
    createMany?: commentCreateManyAnnouncementInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type EnumServiceFieldUpdateOperationsInput = {
    set?: Service
  }

  export type EnumLevelFieldUpdateOperationsInput = {
    set?: Level
  }

  export type UserUpdateOneRequiredWithoutAnnouncementNestedInput = {
    create?: XOR<UserCreateWithoutAnnouncementInput, UserUncheckedCreateWithoutAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnnouncementInput
    upsert?: UserUpsertWithoutAnnouncementInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAnnouncementInput, UserUncheckedUpdateWithoutAnnouncementInput>
  }

  export type commentUpdateManyWithoutAnnouncementNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutAnnouncementInput>, Enumerable<commentUncheckedCreateWithoutAnnouncementInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutAnnouncementInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutAnnouncementInput>
    createMany?: commentCreateManyAnnouncementInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutAnnouncementInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutAnnouncementInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutAnnouncementNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutAnnouncementInput>, Enumerable<commentUncheckedCreateWithoutAnnouncementInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutAnnouncementInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutAnnouncementInput>
    createMany?: commentCreateManyAnnouncementInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutAnnouncementInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutAnnouncementInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAnimalInput = {
    create?: XOR<UserCreateWithoutAnimalInput, UserUncheckedCreateWithoutAnimalInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimalInput
    connect?: UserWhereUniqueInput
  }

  export type EnumgenderFieldUpdateOperationsInput = {
    set?: gender
  }

  export type EnumstatusFieldUpdateOperationsInput = {
    set?: status
  }

  export type UserUpdateOneRequiredWithoutAnimalNestedInput = {
    create?: XOR<UserCreateWithoutAnimalInput, UserUncheckedCreateWithoutAnimalInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimalInput
    upsert?: UserUpsertWithoutAnimalInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAnimalInput, UserUncheckedUpdateWithoutAnimalInput>
  }

  export type EnumtypeAnimalFieldUpdateOperationsInput = {
    set?: typeAnimal
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type AnnouncementCreateNestedOneWithoutCommentInput = {
    create?: XOR<AnnouncementCreateWithoutCommentInput, AnnouncementUncheckedCreateWithoutCommentInput>
    connectOrCreate?: AnnouncementCreateOrConnectWithoutCommentInput
    connect?: AnnouncementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type AnnouncementUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<AnnouncementCreateWithoutCommentInput, AnnouncementUncheckedCreateWithoutCommentInput>
    connectOrCreate?: AnnouncementCreateOrConnectWithoutCommentInput
    upsert?: AnnouncementUpsertWithoutCommentInput
    connect?: AnnouncementWhereUniqueInput
    update?: XOR<AnnouncementUpdateWithoutCommentInput, AnnouncementUncheckedUpdateWithoutCommentInput>
  }

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    connect?: UserWhereUniqueInput
  }

  export type ResponseCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutPostInput>, Enumerable<ResponseUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutPostInput>
    createMany?: ResponseCreateManyPostInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutPostInput>, Enumerable<ResponseUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutPostInput>
    createMany?: ResponseCreateManyPostInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    upsert?: UserUpsertWithoutPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
  }

  export type ResponseUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutPostInput>, Enumerable<ResponseUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ResponseCreateManyPostInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutPostInput>, Enumerable<ResponseUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ResponseCreateManyPostInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutResponseInput = {
    create?: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponseInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutResponseInput = {
    create?: XOR<PostCreateWithoutResponseInput, PostUncheckedCreateWithoutResponseInput>
    connectOrCreate?: PostCreateOrConnectWithoutResponseInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutResponseNestedInput = {
    create?: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponseInput
    upsert?: UserUpsertWithoutResponseInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutResponseInput, UserUncheckedUpdateWithoutResponseInput>
  }

  export type PostUpdateOneRequiredWithoutResponseNestedInput = {
    create?: XOR<PostCreateWithoutResponseInput, PostUncheckedCreateWithoutResponseInput>
    connectOrCreate?: PostCreateOrConnectWithoutResponseInput
    upsert?: PostUpsertWithoutResponseInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutResponseInput, PostUncheckedUpdateWithoutResponseInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedEnumCategoryFilter = {
    equals?: Category
    in?: Enumerable<Category>
    notIn?: Enumerable<Category>
    not?: NestedEnumCategoryFilter | Category
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumCategoryWithAggregatesFilter = {
    equals?: Category
    in?: Enumerable<Category>
    notIn?: Enumerable<Category>
    not?: NestedEnumCategoryWithAggregatesFilter | Category
    _count?: NestedIntFilter
    _min?: NestedEnumCategoryFilter
    _max?: NestedEnumCategoryFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumServiceFilter = {
    equals?: Service
    in?: Enumerable<Service>
    notIn?: Enumerable<Service>
    not?: NestedEnumServiceFilter | Service
  }

  export type NestedEnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type NestedEnumServiceWithAggregatesFilter = {
    equals?: Service
    in?: Enumerable<Service>
    notIn?: Enumerable<Service>
    not?: NestedEnumServiceWithAggregatesFilter | Service
    _count?: NestedIntFilter
    _min?: NestedEnumServiceFilter
    _max?: NestedEnumServiceFilter
  }

  export type NestedEnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type NestedEnumgenderFilter = {
    equals?: gender
    in?: Enumerable<gender>
    notIn?: Enumerable<gender>
    not?: NestedEnumgenderFilter | gender
  }

  export type NestedEnumstatusFilter = {
    equals?: status
    in?: Enumerable<status>
    notIn?: Enumerable<status>
    not?: NestedEnumstatusFilter | status
  }

  export type NestedEnumgenderWithAggregatesFilter = {
    equals?: gender
    in?: Enumerable<gender>
    notIn?: Enumerable<gender>
    not?: NestedEnumgenderWithAggregatesFilter | gender
    _count?: NestedIntFilter
    _min?: NestedEnumgenderFilter
    _max?: NestedEnumgenderFilter
  }

  export type NestedEnumstatusWithAggregatesFilter = {
    equals?: status
    in?: Enumerable<status>
    notIn?: Enumerable<status>
    not?: NestedEnumstatusWithAggregatesFilter | status
    _count?: NestedIntFilter
    _min?: NestedEnumstatusFilter
    _max?: NestedEnumstatusFilter
  }

  export type NestedEnumtypeAnimalFilter = {
    equals?: typeAnimal
    in?: Enumerable<typeAnimal>
    notIn?: Enumerable<typeAnimal>
    not?: NestedEnumtypeAnimalFilter | typeAnimal
  }

  export type NestedEnumtypeAnimalWithAggregatesFilter = {
    equals?: typeAnimal
    in?: Enumerable<typeAnimal>
    notIn?: Enumerable<typeAnimal>
    not?: NestedEnumtypeAnimalWithAggregatesFilter | typeAnimal
    _count?: NestedIntFilter
    _min?: NestedEnumtypeAnimalFilter
    _max?: NestedEnumtypeAnimalFilter
  }

  export type ProductCreateWithoutUserInput = {
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
  }

  export type ProductUncheckedCreateWithoutUserInput = {
    id?: number
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
  }

  export type ProductCreateOrConnectWithoutUserInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductCreateManyUserInputEnvelope = {
    data: Enumerable<ProductCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AnnouncementCreateWithoutUserInput = {
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    comment?: commentCreateNestedManyWithoutAnnouncementInput
  }

  export type AnnouncementUncheckedCreateWithoutUserInput = {
    id?: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    comment?: commentUncheckedCreateNestedManyWithoutAnnouncementInput
  }

  export type AnnouncementCreateOrConnectWithoutUserInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutUserInput, AnnouncementUncheckedCreateWithoutUserInput>
  }

  export type AnnouncementCreateManyUserInputEnvelope = {
    data: Enumerable<AnnouncementCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AnimalCreateWithoutUserInput = {
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
  }

  export type AnimalUncheckedCreateWithoutUserInput = {
    id?: number
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
  }

  export type AnimalCreateOrConnectWithoutUserInput = {
    where: AnimalWhereUniqueInput
    create: XOR<AnimalCreateWithoutUserInput, AnimalUncheckedCreateWithoutUserInput>
  }

  export type AnimalCreateManyUserInputEnvelope = {
    data: Enumerable<AnimalCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type commentCreateWithoutUserInput = {
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    announcement: AnnouncementCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    announcementId: number
  }

  export type commentCreateOrConnectWithoutUserInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentCreateManyUserInputEnvelope = {
    data: Enumerable<commentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutUserInput = {
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    Response?: ResponseCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    Response?: ResponseUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: Enumerable<PostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ResponseCreateWithoutUserInput = {
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    post: PostCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    postId: number
  }

  export type ResponseCreateOrConnectWithoutUserInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseCreateManyUserInputEnvelope = {
    data: Enumerable<ResponseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
  }

  export type ProductUpdateManyWithWhereWithoutUserInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    category?: EnumCategoryFilter | Category
    brandProduct?: StringFilter | string
    description?: StringFilter | string
    animalCible?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    isDispo?: BoolFilter | boolean
    userId?: IntFilter | number
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutUserInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutUserInput, AnnouncementUncheckedUpdateWithoutUserInput>
    create: XOR<AnnouncementCreateWithoutUserInput, AnnouncementUncheckedCreateWithoutUserInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutUserInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutUserInput, AnnouncementUncheckedUpdateWithoutUserInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutUserInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutAnnouncementInput>
  }

  export type AnnouncementScalarWhereInput = {
    AND?: Enumerable<AnnouncementScalarWhereInput>
    OR?: Enumerable<AnnouncementScalarWhereInput>
    NOT?: Enumerable<AnnouncementScalarWhereInput>
    id?: IntFilter | number
    type?: EnumServiceFilter | Service
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    contact?: StringFilter | string
    ville?: StringFilter | string
    experience?: IntFilter | number
    level?: EnumLevelFilter | Level
    image?: StringFilter | string
    description?: StringFilter | string
    city?: StringFilter | string
    userId?: IntFilter | number
  }

  export type AnimalUpsertWithWhereUniqueWithoutUserInput = {
    where: AnimalWhereUniqueInput
    update: XOR<AnimalUpdateWithoutUserInput, AnimalUncheckedUpdateWithoutUserInput>
    create: XOR<AnimalCreateWithoutUserInput, AnimalUncheckedCreateWithoutUserInput>
  }

  export type AnimalUpdateWithWhereUniqueWithoutUserInput = {
    where: AnimalWhereUniqueInput
    data: XOR<AnimalUpdateWithoutUserInput, AnimalUncheckedUpdateWithoutUserInput>
  }

  export type AnimalUpdateManyWithWhereWithoutUserInput = {
    where: AnimalScalarWhereInput
    data: XOR<AnimalUpdateManyMutationInput, AnimalUncheckedUpdateManyWithoutAnimalInput>
  }

  export type AnimalScalarWhereInput = {
    AND?: Enumerable<AnimalScalarWhereInput>
    OR?: Enumerable<AnimalScalarWhereInput>
    NOT?: Enumerable<AnimalScalarWhereInput>
    id?: IntFilter | number
    species?: StringFilter | string
    race?: StringFilter | string
    dateOfBirth?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    age?: FloatFilter | number
    isVaccinated?: BoolFilter | boolean
    isEducated?: BoolFilter | boolean
    gender?: EnumgenderFilter | gender
    status?: EnumstatusFilter | status
    price?: FloatFilter | number
    image?: StringFilter | string
    userId?: IntFilter | number
  }

  export type commentUpsertWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentUpdateWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
  }

  export type commentUpdateManyWithWhereWithoutUserInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type commentScalarWhereInput = {
    AND?: Enumerable<commentScalarWhereInput>
    OR?: Enumerable<commentScalarWhereInput>
    NOT?: Enumerable<commentScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    message?: StringFilter | string
    createdAt?: StringFilter | string
    stars?: IntFilter | number
    userId?: IntFilter | number
    announcementId?: IntFilter | number
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    content?: StringFilter | string
    createdAt?: StringFilter | string
    image?: StringFilter | string
    userId?: IntFilter | number
  }

  export type ResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
  }

  export type ResponseUpdateManyWithWhereWithoutUserInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutResponseInput>
  }

  export type ResponseScalarWhereInput = {
    AND?: Enumerable<ResponseScalarWhereInput>
    OR?: Enumerable<ResponseScalarWhereInput>
    NOT?: Enumerable<ResponseScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    response?: StringFilter | string
    image?: StringFilter | string
    createdAt?: StringFilter | string
    userId?: IntFilter | number
    postId?: IntFilter | number
  }

  export type UserCreateWithoutProductInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
  }

  export type UserUpsertWithoutProductInput = {
    update: XOR<UserUpdateWithoutProductInput, UserUncheckedUpdateWithoutProductInput>
    create: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
  }

  export type UserUpdateWithoutProductInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnnouncementInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnnouncementInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnnouncementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnnouncementInput, UserUncheckedCreateWithoutAnnouncementInput>
  }

  export type commentCreateWithoutAnnouncementInput = {
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    user: UserCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutAnnouncementInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    userId: number
  }

  export type commentCreateOrConnectWithoutAnnouncementInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutAnnouncementInput, commentUncheckedCreateWithoutAnnouncementInput>
  }

  export type commentCreateManyAnnouncementInputEnvelope = {
    data: Enumerable<commentCreateManyAnnouncementInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAnnouncementInput = {
    update: XOR<UserUpdateWithoutAnnouncementInput, UserUncheckedUpdateWithoutAnnouncementInput>
    create: XOR<UserCreateWithoutAnnouncementInput, UserUncheckedCreateWithoutAnnouncementInput>
  }

  export type UserUpdateWithoutAnnouncementInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentUpsertWithWhereUniqueWithoutAnnouncementInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutAnnouncementInput, commentUncheckedUpdateWithoutAnnouncementInput>
    create: XOR<commentCreateWithoutAnnouncementInput, commentUncheckedCreateWithoutAnnouncementInput>
  }

  export type commentUpdateWithWhereUniqueWithoutAnnouncementInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutAnnouncementInput, commentUncheckedUpdateWithoutAnnouncementInput>
  }

  export type commentUpdateManyWithWhereWithoutAnnouncementInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutAnimalInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimalInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimalInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimalInput, UserUncheckedCreateWithoutAnimalInput>
  }

  export type UserUpsertWithoutAnimalInput = {
    update: XOR<UserUpdateWithoutAnimalInput, UserUncheckedUpdateWithoutAnimalInput>
    create: XOR<UserCreateWithoutAnimalInput, UserUncheckedCreateWithoutAnimalInput>
  }

  export type UserUpdateWithoutAnimalInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimalInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type AnnouncementCreateWithoutCommentInput = {
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    user: UserCreateNestedOneWithoutAnnouncementInput
  }

  export type AnnouncementUncheckedCreateWithoutCommentInput = {
    id?: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
    userId: number
  }

  export type AnnouncementCreateOrConnectWithoutCommentInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutCommentInput, AnnouncementUncheckedCreateWithoutCommentInput>
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnnouncementUpsertWithoutCommentInput = {
    update: XOR<AnnouncementUpdateWithoutCommentInput, AnnouncementUncheckedUpdateWithoutCommentInput>
    create: XOR<AnnouncementCreateWithoutCommentInput, AnnouncementUncheckedCreateWithoutCommentInput>
  }

  export type AnnouncementUpdateWithoutCommentInput = {
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAnnouncementNestedInput
  }

  export type AnnouncementUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutPostInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type ResponseCreateWithoutPostInput = {
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    user: UserCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateWithoutPostInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    userId: number
  }

  export type ResponseCreateOrConnectWithoutPostInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutPostInput, ResponseUncheckedCreateWithoutPostInput>
  }

  export type ResponseCreateManyPostInputEnvelope = {
    data: Enumerable<ResponseCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type UserUpdateWithoutPostInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ResponseUpsertWithWhereUniqueWithoutPostInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutPostInput, ResponseUncheckedUpdateWithoutPostInput>
    create: XOR<ResponseCreateWithoutPostInput, ResponseUncheckedCreateWithoutPostInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutPostInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutPostInput, ResponseUncheckedUpdateWithoutPostInput>
  }

  export type ResponseUpdateManyWithWhereWithoutPostInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutResponseInput>
  }

  export type UserCreateWithoutResponseInput = {
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductCreateNestedManyWithoutUserInput
    announcement?: AnnouncementCreateNestedManyWithoutUserInput
    Animal?: AnimalCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResponseInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    photo: string
    password: string
    phoneNumber: string
    role: Role
    createdAt: string
    updatedAt: string
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    announcement?: AnnouncementUncheckedCreateNestedManyWithoutUserInput
    Animal?: AnimalUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResponseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
  }

  export type PostCreateWithoutResponseInput = {
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    user: UserCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutResponseInput = {
    id?: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
    userId: number
  }

  export type PostCreateOrConnectWithoutResponseInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutResponseInput, PostUncheckedCreateWithoutResponseInput>
  }

  export type UserUpsertWithoutResponseInput = {
    update: XOR<UserUpdateWithoutResponseInput, UserUncheckedUpdateWithoutResponseInput>
    create: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
  }

  export type UserUpdateWithoutResponseInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUpdateManyWithoutUserNestedInput
    Animal?: AnimalUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: StringFieldUpdateOperationsInput | string
    updatedAt?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    announcement?: AnnouncementUncheckedUpdateManyWithoutUserNestedInput
    Animal?: AnimalUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutResponseInput = {
    update: XOR<PostUpdateWithoutResponseInput, PostUncheckedUpdateWithoutResponseInput>
    create: XOR<PostCreateWithoutResponseInput, PostUncheckedCreateWithoutResponseInput>
  }

  export type PostUpdateWithoutResponseInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateManyUserInput = {
    id?: number
    category: Category
    brandProduct: string
    description: string
    animalCible: string
    image: string
    price: number
    isDispo: boolean
  }

  export type AnnouncementCreateManyUserInput = {
    id?: number
    type: Service
    firstName: string
    lastName: string
    contact: string
    ville: string
    experience: number
    level: Level
    image: string
    description: string
    city: string
  }

  export type AnimalCreateManyUserInput = {
    id?: number
    species: string
    race: string
    dateOfBirth: string
    name: string
    description: string
    age: number
    isVaccinated: boolean
    isEducated: boolean
    gender: gender
    status: status
    price: number
    image: string
  }

  export type commentCreateManyUserInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    announcementId: number
  }

  export type PostCreateManyUserInput = {
    id?: number
    firstName: string
    lastName: string
    content: string
    createdAt: string
    image: string
  }

  export type ResponseCreateManyUserInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    postId: number
  }

  export type ProductUpdateWithoutUserInput = {
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryFieldUpdateOperationsInput | Category
    brandProduct?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    animalCible?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isDispo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AnnouncementUpdateWithoutUserInput = {
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    comment?: commentUpdateManyWithoutAnnouncementNestedInput
  }

  export type AnnouncementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    comment?: commentUncheckedUpdateManyWithoutAnnouncementNestedInput
  }

  export type AnnouncementUncheckedUpdateManyWithoutAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumServiceFieldUpdateOperationsInput | Service
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    experience?: IntFieldUpdateOperationsInput | number
    level?: EnumLevelFieldUpdateOperationsInput | Level
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type AnimalUpdateWithoutUserInput = {
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AnimalUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AnimalUncheckedUpdateManyWithoutAnimalInput = {
    id?: IntFieldUpdateOperationsInput | number
    species?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    isVaccinated?: BoolFieldUpdateOperationsInput | boolean
    isEducated?: BoolFieldUpdateOperationsInput | boolean
    gender?: EnumgenderFieldUpdateOperationsInput | gender
    status?: EnumstatusFieldUpdateOperationsInput | status
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type commentUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    announcement?: AnnouncementUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    announcementId?: IntFieldUpdateOperationsInput | number
  }

  export type commentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    announcementId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Response?: ResponseUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Response?: ResponseUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ResponseUncheckedUpdateManyWithoutResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type commentCreateManyAnnouncementInput = {
    id?: number
    firstName: string
    lastName: string
    message: string
    createdAt: string
    stars: number
    userId: number
  }

  export type commentUpdateWithoutAnnouncementInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ResponseCreateManyPostInput = {
    id?: number
    firstName: string
    lastName: string
    response: string
    image: string
    createdAt: string
    userId: number
  }

  export type ResponseUpdateWithoutPostInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}