
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AnimalScalarFieldEnum = makeEnum({
  id: 'id',
  species: 'species',
  race: 'race',
  age: 'age',
  isVaccinated: 'isVaccinated',
  isEducated: 'isEducated',
  gender: 'gender',
  status: 'status',
  price: 'price',
  image: 'image',
  userId: 'userId'
});

exports.Prisma.AnnouncementScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  firstName: 'firstName',
  lastName: 'lastName',
  contact: 'contact',
  ville: 'ville',
  experience: 'experience',
  level: 'level',
  image: 'image',
  description: 'description',
  city: 'city',
  userId: 'userId'
});

exports.Prisma.FoundDeclarationScalarFieldEnum = makeEnum({
  id: 'id',
  image: 'image',
  animal: 'animal',
  race: 'race',
  description: 'description',
  dateFound: 'dateFound',
  placeFound: 'placeFound',
  phoneNumber: 'phoneNumber'
});

exports.Prisma.LostDeclarationScalarFieldEnum = makeEnum({
  id: 'id',
  image: 'image',
  animal: 'animal',
  race: 'race',
  description: 'description',
  dateLost: 'dateLost',
  placeLost: 'placeLost',
  phoneNumber: 'phoneNumber',
  withReward: 'withReward'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  category: 'category',
  brandProduct: 'brandProduct',
  description: 'description',
  animalCible: 'animalCible',
  image: 'image',
  price: 'price',
  isDispo: 'isDispo',
  userId: 'userId'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  photo: 'photo',
  password: 'password',
  phoneNumber: 'phoneNumber',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});
exports.Category = makeEnum({
  food: 'food',
  accessory: 'accessory'
});

exports.Level = makeEnum({
  basique: 'basique',
  intermediaire: 'intermediaire',
  personnalise: 'personnalise'
});

exports.Role = makeEnum({
  admin: 'admin',
  client: 'client',
  veterinary: 'veterinary',
  petTrainer: 'petTrainer',
  petSitter: 'petSitter',
  petGroomer: 'petGroomer',
  petShop: 'petShop',
  petSeller: 'petSeller',
  animalOwner: 'animalOwner'
});

exports.Service = makeEnum({
  veterinaryCaring: 'veterinaryCaring',
  petSitting: 'petSitting',
  petGrooming: 'petGrooming',
  petTraining: 'petTraining'
});

exports.gender = makeEnum({
  male: 'male',
  female: 'female'
});

exports.status = makeEnum({
  toSell: 'toSell',
  toAdopt: 'toAdopt'
});

exports.typeAnimal = makeEnum({
  cat: 'cat',
  dog: 'dog'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Product: 'Product',
  Announcement: 'Announcement',
  Animal: 'Animal',
  LostDeclaration: 'LostDeclaration',
  FoundDeclaration: 'FoundDeclaration'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
