generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// table user (qui peut etre un vendeur , prestataire de service , client , admin)
model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String         @unique
  photo        String //photo de lutlisateur 
  password     String
  phoneNumber  String
  role         Role
  createdAt    String
  updatedAt    String
  Product      Product[]
  announcement Announcement[]
  Animal       Animal[]

  comment          comment[]
  Post             Post[]
  Response         Response[]
  Reply            Reply[]
  FoundDeclaration FoundDeclaration[]
  LostDeclaration  LostDeclaration[]
}

enum Role {
  admin
  client
  veterinary
  petTrainer
  petSitter
  petGroomer
  petShop
  petSeller
  animalOwner
}

// table produit (qui peut etre "food" ou "accesoire")
model Product {
  id           Int      @id @default(autoincrement())
  category     Category
  brandProduct String //marque de produit
  description  String
  animalCible  String
  image        String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  price        Float
  isDispo      Boolean
  userId       Int
}

enum Category {
  food
  accessory
}

// table annonce de service 
model Announcement {
  id          Int       @id @default(autoincrement())
  type        Service
  firstName   String
  lastName    String
  contact     String
  ville       String
  experience  Int
  level       Level
  image       String
  description String
  city        String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comment     comment[]
}

enum Level {
  basique
  intermediaire
  personnalise
}

enum Service {
  veterinaryCaring
  petSitting
  petGrooming
  petTraining
}

// table animal (a vendre ou a adopter)
model Animal {
  id           Int     @id @default(autoincrement())
  species      String
  race         String
  dateOfBirth  String
  name         String
  description  String
  age          Float
  isVaccinated Boolean //vacciné ou non  
  isEducated   Boolean //dressé ou non
  gender       gender
  status       status
  price        Float
  image        String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

enum gender {
  male
  female
}

enum status {
  toSell
  toAdopt
}

// annonce de declaration de perte d un animal 
model LostDeclaration {
  id          Int        @id @default(autoincrement())
  image       String
  animal      typeAnimal
  race        String
  description String
  dateLost    String
  placeLost   String
  phoneNumber String
  withReward  Boolean
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

// annonce de declaration de retrouveille d un animal 
model FoundDeclaration {
  id          Int        @id @default(autoincrement())
  image       String
  animal      typeAnimal
  race        String
  description String
  dateFound   String
  placeFound  String
  phoneNumber String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

enum typeAnimal {
  chat
  chien
}

model comment {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  message        String
  createdAt      String
  stars          Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId Int
}

model Post {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  photoUser  String
  subject    String
  content   String
  createdAt String
  image     String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Response  Response[]
}

model Response {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  response  String
  image     String
  createdAt String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  Reply     Reply[]
}

model Reply {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  reply      String
  image      String
  createdAt  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId Int
}
